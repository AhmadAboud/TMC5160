/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "EventLoop.hpp"
#include "hx711.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;
TIM_HandleTypeDef htim24;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MPU_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM17_Init(void);
static void MX_TIM24_Init(void);
static void MX_TIM16_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI1_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
double calcFrequency(double m_dCycle, double m_dRampTimeMS,double m_dSollSpeedDriveHZ )
{
	double PI =3.14159999999478589672;
	double m_dCurrentlySpeedDriveHz;
    m_dCurrentlySpeedDriveHz = m_dSollSpeedDriveHZ*pow(sin(m_dCycle*(1/m_dRampTimeMS)-PI/2),10);
 	return m_dCurrentlySpeedDriveHz;
}

void Thread(double m_dSollSpeedDriveHZ, double m_dCycle, double m_dRampTimeMS, double m_dCurrentlySpeedDriveHz)
{
	int m_bStart = 0, m_bReverseRun = 0;

    if(m_bReverseRun)
    {
    	HAL_GPIO_WritePin(GPIOC, DirSM40_Pin,GPIO_PIN_SET);
	}

    calcFrequency( m_dCycle, m_dRampTimeMS, m_dSollSpeedDriveHZ);
	m_dCycle++;
	__HAL_TIM_SET_AUTORELOAD (&htim17,calcFrequency( m_dCycle, m_dRampTimeMS, 1/m_dSollSpeedDriveHZ)); // 31khz
	__HAL_TIM_SET_PRESCALER (&htim17,5);
    __HAL_TIM_SET_COMPARE (&htim17,TIM_CHANNEL_1,50);
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
	TmcStart();

	if (m_dCycle > m_dRampTimeMS)
	{
		m_dCycle = m_dRampTimeMS;
	 }

	if (!m_bStart)
	{
	calcFrequency(m_dCycle, m_dRampTimeMS, m_dSollSpeedDriveHZ);
	m_dCycle--;
	}

	if (m_dCycle <= 0)
	{
		HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
		m_dCycle = 0;

	}
}

void TmcStart() // Chopper Config. für TMC5160
{
	uint8_t pDataSend1[5]={0xEC, 0, 0x1, 0, 0xC3};
	uint8_t pDataRecv1[5]={0, 0, 0, 0, 0};
	HAL_GPIO_WritePin(csSM40_GPIO_Port, csSM40_Pin,GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(&hspi1, pDataSend1, pDataRecv1, 5, 1000);
	HAL_GPIO_WritePin(csSM40_GPIO_Port, csSM40_Pin,GPIO_PIN_SET);

}
volatile uint32_t timerOverflow = 0;

uint32_t ReadHardwareTimer()
{
    uint32_t count = htim17.Instance->CNT;
    return count;
}

uint32_t ReadTimerOverflow()
{

    return timerOverflow;
}


uint16_t mem_read_reg(uint16_t register_pointer)

{    HAL_StatusTypeDef status = HAL_OK;    uint16_t return_value = 0;
     while (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(0x40), 3, 100) != HAL_OK) {}
     uint8_t* Data;
     status = HAL_I2C_Mem_Read(&hi2c1,(uint16_t)(0x40),(uint16_t)register_pointer, I2C_MEMADD_SIZE_16BIT,  &return_value, 2,   100);
    /* Check the communication status */
    if(status != HAL_OK) {
    }
    return return_value;
}

void writeAd7790 (uint8_t ui8address, uint8_t ui8value)
{
    uint8_t Data[2]={ui8address,ui8value};
    HAL_StatusTypeDef ret3;
	uint8_t Data1[2]={ui8address,ui8value};
	if (ui8address != RESET)
		{
			HAL_GPIO_WritePin(GPIOB, CS_ADC_Pin,GPIO_PIN_RESET);
			ret3  = HAL_SPI_Transmit(&hspi2, Data, 2, 1000);
		   	HAL_GPIO_WritePin(GPIOB, CS_ADC_Pin,GPIO_PIN_SET);
		} else
		{
			HAL_GPIO_WritePin(GPIOB, CS_ADC_Pin,GPIO_PIN_RESET);
			ret3  = HAL_SPI_Transmit(&hspi2, Data1, 2, 1000);
			ret3  = HAL_SPI_Transmit(&hspi2, Data1, 2, 1000);
			ret3  = HAL_SPI_Transmit(&hspi2, Data1, 2, 1000);
			ret3  = HAL_SPI_Transmit(&hspi2, Data1, 2, 1000);
			HAL_GPIO_WritePin(GPIOB, CS_ADC_Pin,GPIO_PIN_SET);
		}

}
uint16_t readAd7790 (uint8_t ui8address)
{
	uint16_t ui16AdcCodes = 0;
	uint8_t ui8AdcUpperCodes = 0;			// Data register read MSB
	uint8_t ui8AdcLowerCodes = 0;			// Data register read LSB
	uint8_t DataRecive[3]={ui8address,ui8AdcUpperCodes,ui8AdcLowerCodes};
	uint8_t DataSent[3]={ui8address,0x00,0x00};
	HAL_StatusTypeDef ret4;
	HAL_GPIO_WritePin(GPIOB, CS_ADC_Pin,GPIO_PIN_RESET);

	ret4  = HAL_SPI_Receive(&hspi2, DataRecive, 3, 1000);


	HAL_GPIO_WritePin(GPIOB, CS_ADC_Pin,GPIO_PIN_SET);





	return ui16AdcCodes;
}



/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM17_Init();
  MX_TIM24_Init();
  MX_TIM16_Init();
  MX_USART2_UART_Init();
  MX_SPI1_Init();
  MX_I2C1_Init();
  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */

// Wägezellen mit SPI AD7795
  # define CS_0  HAL_GPIO_WritePin(GPIOB, CS_ADC_Pin,0)
  # define CS_1  HAL_GPIO_WritePin(GPIOB, CS_ADC_Pin,1)
  uint8_t addr; uint8_t *byte;
  HAL_StatusTypeDef hal_status;
  uint8_t tx_data[5];
  uint8_t rx_data[5];

  // tx_data[0] = addr | 0x8000;  // read operation
  uint8_t tx_data1[1]={0};            // dummy byte for response
  uint8_t rx_data1[1]={0};
  //Beginn SPI2
  CS_0;
  //RESET AD7795
  HAL_StatusTypeDef ret;

 ret = HAL_SPI_Receive(&hspi2, rx_data1, 1, 1000);
 // ret =  HAL_SPI_TransmitReceive(&hspi2, tx_data1, rx_data1, 1, 1000);

  CS_1;
  //END SPI2
  HAL_Delay(50);
  //Init Configuration Register
  //Beginn
  CS_0;
  uint8_t tx_data3[2] = {0x00,0xA};
  uint8_t rx_data3[2] = {0x00,0x00};
  ret = HAL_SPI_TransmitReceive(&hspi2, tx_data3, rx_data3, 2, 1000);
  CS_1;
  //End
  HAL_Delay(50);



	#define MODE_WRITE			0x10					// Write to the Mode Register
	#define FILTER_WRITE		0x20					// Write to the Filter Register

	//ADC Read Commands
	#define STATUS_READ			0x08					// Read from the Status Register
	#define MODE_READ			0x18					// Read from the Mode Register
	#define FILTER_READ			0x28					// Read from the Filter Register
	#define DATA_READ			0x38					// Read from the Data Register

	#define RESET				0xFF					// Resets the chip to default
	// AD5270 variables
	float fResistorValue = 0;
	uint16_t ui16RdacWord = 0;

	// AD7790 variables
	uint16_t ui16Adcdata = 0;

	// Main variables
	float fAdcVoltage = 0;
	float fConcentration = 0;


	 ui16Adcdata = readAd7790 (STATUS_READ);

	 writeAd7790 (0x00, 0xFF);				//Resets the part for initial use
	 HAL_Delay(1000);
	 writeAd7790 (MODE_WRITE, 0x00);			//Mode register value (single conversion, +/- Vref input, unbuffered mode)
	 writeAd7790 (FILTER_WRITE, 0x07);		// Filter register value (clock not divided down, 9.5 Hz update rate)

	 while (1)
	 {
		ui16Adcdata = readAd7790(DATA_READ);
		fAdcVoltage = ((ui16Adcdata / pow(2,15))-1)*1.2;		// Formula for input voltage using bipolar configuration
		// fConcentration = (abs(fAdcVoltage)/ (ui16RdacWord*(20000/1024))) / (ui16sensitivity*pow(10,-9));
	 }









/*
  // Weigh Cell hx711:
  HAL_GPIO_WritePin(csSM40_GPIO_Port, csSM40_Pin,GPIO_PIN_SET);
  HAL_GPIO_WritePin(V24Vor_GPIO_Port, V24Vor_Pin, GPIO_PIN_SET);

  HAL_Delay(200);

  HAL_GPIO_WritePin(V24ON_GPIO_Port, V24ON_Pin, GPIO_PIN_SET);
  HAL_Delay(200);

  hx711_t loadcell;
  float weight;
  // HX_SCK1 = CLK PIN
  // DATA_PIN = HX_DOUT1
  hx711_init(&loadcell,GPIOD, HX_SCK4_Pin, GPIOE, HX_DOUT4_Pin);
  hx711_coef_set(&loadcell, 354.5); // read afer calibration
  hx711_tare(&loadcell, 10);
  // HX_DOUT1_GPIO_Port
  for(int i=0;i<50; i++)
  {
  HAL_Delay(500);
  weight = hx711_weight(&loadcell, 10);
  }
*/


  double m_dSollSpeedDriveHZ= 700;
  double m_dCycle=1;
  double m_dRampTimeMS =100;
  double m_dCurrentlySpeedDriveHz=0;
  int m_bStart = 0, m_bReverseRun = 0;
  HAL_GPIO_WritePin(csSM40_GPIO_Port, csSM40_Pin,GPIO_PIN_SET);
  HAL_GPIO_WritePin(V24Vor_GPIO_Port, V24Vor_Pin, GPIO_PIN_SET);

  HAL_Delay(200);

  HAL_GPIO_WritePin(V24ON_GPIO_Port, V24ON_Pin, GPIO_PIN_SET);
  HAL_Delay(200);

// start Stepper direct!
  while(1)
  {
      EventCreateC();
  }



  // Eingänge und Temp. Sensor

//when A2=1 A1=1 A0=1 =>0100 0000  0 write operation = 0x40 or 0100 0001  read operation = 0x41
//CAT9555 regsiter
#define IN_PORT0    0
#define IN_PORT1    1
#define OUT_PORT0   2
#define OUT_PORT1   3
#define PI_PORT0    4
#define PI_PORT1    5
#define CFG_PORT0   6
#define CFG_PORT1   7

unsigned char p0_val = 0x00;
unsigned char p1_val = 0xff;
unsigned int t = 0;
unsigned char int_flag = 0;

uint16_t DEV_ADDR  = 0X40;
uint16_t  DEV_ADDR2  = 0X41;



mem_read_reg(CFG_PORT0);
mem_read_reg(CFG_PORT1);

while(1)
{
	  HAL_Delay(20);
	   t++;
	   if(t>49)// Invert the level of the P0 port for about 1 second(20*50=1000ms)
	   {
	      t=0;
	      p0_val =~p0_val;
	     // Write_reg(OUT_PORT0, p0_val);
	   }
	      uint16_t res = mem_read_reg(IN_PORT1);     // Read_reg(IN_PORT1);

 		  if(/* X6 : */(res == 0xffef)||(res == 0xffbf)||(res == 0xffdf)||(res == 0xff7f)||(res == 0xfffe)||(res == 0xfffb||(res == 0xfffd))||(res == 0xfff7)
 				/* X5 : */||(res == 0xf7ff)||(res == 0xfeff)||(res == 0xfbff)||(res == 0xfdff)||(res == 0x7fff)||(res == 0xefff)||(res == 0xbfff)||(res == 0xdfff))
 		   {
 			   EventCreateC();
 		   }else
 		   {
 			   HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 		   }

}


  static const uint8_t REG_TEMP = 0xc1;
  uint8_t TMP102_ADDR = 0x20;
  uint8_t buf[12];

  HAL_StatusTypeDef ret1;

  buf[0] = REG_TEMP;
  ret1 = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, 1000);
  HAL_Delay(100);
  if ( ret1 != HAL_OK ) {
      strcpy((char*)buf, "Error Tx\r\n");
  } else {

      ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, 1000);
      if ( ret1 != HAL_OK ) {
      strcpy((char*)buf, "Error Rx\r\n");
      }
  }

  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), 1000);






 /* TIM24->CCR2 = 65535/2;
  HAL_TIMEx_PWMN_Start(&htim24, TIM_CHANNEL_2);*/

// Motoren TMC5160
  TIM16->CCR1 = 65535/2;
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);



  TIM24->CCR1 = 65535/2;
  HAL_TIM_PWM_Start(&htim24, TIM_CHANNEL_1);

  TIM24->CCR2 = 65535/2;
  HAL_TIM_PWM_Start(&htim24, TIM_CHANNEL_2);

    uint8_t pDataSend10[5]={0xEC, 0, 0x1, 0, 0xC3};
  	uint8_t pDataRecv10[5]={0, 0, 0, 0, 0};
  	HAL_GPIO_WritePin(csSM40_2_GPIO_Port, csSM40_2_Pin,GPIO_PIN_RESET);
  	HAL_SPI_TransmitReceive(&hspi1, pDataSend10, pDataRecv10, 5, 1000);
  	HAL_GPIO_WritePin(csSM40_2_GPIO_Port, csSM40_2_Pin,GPIO_PIN_SET);



while(1)
{
   for(int i=1; i<330;i+=60)
	{
		//InitializeInterface(ReadHardwareTimer, ReadTimerOverflow);
	   TIM17->CCR1 = 65535/2;
	   HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
		/*m_dCurrentlySpeedDriveHz = 10+round(calcFrequency(i, m_dRampTimeMS,m_dSollSpeedDriveHZ));
		timerOverflow = 60 + m_dCurrentlySpeedDriveHz;
		__HAL_TIM_SET_AUTORELOAD (&htim17, 60 + m_dCurrentlySpeedDriveHz); // 31khz
		__HAL_TIM_SET_PRESCALER (&htim17,5);
		__HAL_TIM_SET_COMPARE (&htim17,TIM_CHANNEL_1,50);
		HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);*/
		TmcStart();
		HAL_Delay(80);
  	}
}

  HAL_GPIO_WritePin(GPIOA, OUT10_Pin,GPIO_PIN_SET );
  HAL_GPIO_WritePin(GPIOA, OUT10_Pin,GPIO_PIN_RESET );


	int tt =10000;
	while(tt>0)
	{
		tt--;
		 //Dir 1
	   	  HAL_GPIO_WritePin(GPIOC, DirSM40_Pin,GPIO_PIN_RESET);
		  /* TIM17->CCR1 = 65535/2;
			 HAL_TIM_Base_Start(&htim17);*/
		  // Rampe : PW 50, Prescaler 5, Overload: bei 40 ist Freq=16 und bei 1000 ist Freq 300 Hz

		  // 0xEC000100C3;
			uint8_t pDataSend2[5]={0xEC, 0, 0x1, 0, 0xC3};
			uint8_t pDataRecv2[5]={0, 0, 0, 0, 0};
			uint8_t pDataSend3[5]={0x90, 0, 0x06, 0x1F, 0x0A};
			uint8_t pDataRecv3[5]={0, 0, 0, 0, 0};
			uint32_t uhCapture = 0;
			uint32_t TIM17_pulses = 12;
			uint16_t autoreload_value;
			autoreload_value = __HAL_TIM_GET_AUTORELOAD(&htim17);

		  for(int i=1; i<330;i+=60)
		  {
			  m_dCurrentlySpeedDriveHz = 10+round(calcFrequency(i, m_dRampTimeMS,m_dSollSpeedDriveHZ));
			__HAL_TIM_SET_AUTORELOAD (&htim17, 60 + m_dCurrentlySpeedDriveHz); // 31khz
			__HAL_TIM_SET_PRESCALER (&htim17,5);
			__HAL_TIM_SET_COMPARE (&htim17,TIM_CHANNEL_1,50);
			HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);

			HAL_GPIO_WritePin(csSM40_GPIO_Port, csSM40_Pin,GPIO_PIN_RESET);
			HAL_SPI_TransmitReceive(&hspi1, pDataSend2, pDataRecv2, 5, 1000);
			HAL_GPIO_WritePin(csSM40_GPIO_Port, csSM40_Pin,GPIO_PIN_SET);
			HAL_Delay(80);
		  }


		  HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
		  HAL_Delay(3000);
		   /*HAL_GPIO_WritePin(csSM40_GPIO_Port, csSM40_Pin,GPIO_PIN_RESET);
		   HAL_SPI_TransmitReceive(&hspi1, pDataSend3, pDataRecv3, 5, 1000);
		   HAL_GPIO_WritePin(csSM40_GPIO_Port, csSM40_Pin,GPIO_PIN_SET);
		   HAL_Delay(23);*/
	  }









  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = 64;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 12;
  RCC_OscInitStruct.PLL.PLLP = 1;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x20404060;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x0;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
  htim16.Init.Prescaler = 0;
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.Period = 65535;
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim16.Init.RepetitionCounter = 0;
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);

}

/**
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
  htim17.Init.Prescaler = 0;
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim17.Init.Period = 65535;
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim17.Init.RepetitionCounter = 0;
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);

}

/**
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
  htim24.Init.Prescaler = 0;
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim24.Init.Period = 4294967295;
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_PWM_Init(&htim24) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */
  HAL_TIM_MspPostInit(&htim24);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ADC_GPIO_Port, CS_ADC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT10_Pin|V24Vor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(csSM40_GPIO_Port, csSM40_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, V24ON_Pin|HX_SCK3_Pin|HX_SCK2_Pin|HX_SCK4_Pin
                          |HX_SCK1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DirSM40_2_Pin|DirSM40_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OUT7_Pin|csSM40_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_ADC_Pin */
  GPIO_InitStruct.Pin = CS_ADC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_ADC_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : OUT10_Pin V24Vor_Pin */
  GPIO_InitStruct.Pin = OUT10_Pin|V24Vor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : csSM40_Pin */
  GPIO_InitStruct.Pin = csSM40_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(csSM40_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : V24ON_Pin HX_SCK3_Pin HX_SCK2_Pin HX_SCK4_Pin
                           HX_SCK1_Pin */
  GPIO_InitStruct.Pin = V24ON_Pin|HX_SCK3_Pin|HX_SCK2_Pin|HX_SCK4_Pin
                          |HX_SCK1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : DirSM40_2_Pin DirSM40_Pin */
  GPIO_InitStruct.Pin = DirSM40_2_Pin|DirSM40_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : HX_DOUT4_Pin HX_DOUT3_Pin HX_DOUT1_Pin HX_DOUT2_Pin */
  GPIO_InitStruct.Pin = HX_DOUT4_Pin|HX_DOUT3_Pin|HX_DOUT1_Pin|HX_DOUT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : OUT7_Pin csSM40_2_Pin */
  GPIO_InitStruct.Pin = OUT7_Pin|csSM40_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */


/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};

  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  if(htim == &htim17)
      {
          timerOverflow++;
      }

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
