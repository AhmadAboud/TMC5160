
TMC5160_H725.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006848  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08006b14  08006b14  00016b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006b60  08006b60  00016b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006b64  08006b64  00016b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08006b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002b8  24000010  08006b78  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240002c8  08006b78  000202c8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016d5e  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a6a  00000000  00000000  00036ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001378  00000000  00000000  00039850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f36  00000000  00000000  0003abc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003256  00000000  00000000  0003bafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001960b  00000000  00000000  0003ed54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014a7c9  00000000  00000000  0005835f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005360  00000000  00000000  001a2b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000070  00000000  00000000  001a7e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08006afc 	.word	0x08006afc

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08006afc 	.word	0x08006afc

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b0a8      	sub	sp, #160	; 0xa0
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000312:	f000 fd19 	bl	8000d48 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000316:	4b9a      	ldr	r3, [pc, #616]	; (8000580 <main+0x274>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800031e:	2b00      	cmp	r3, #0
 8000320:	d11b      	bne.n	800035a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000322:	f3bf 8f4f 	dsb	sy
}
 8000326:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000328:	f3bf 8f6f 	isb	sy
}
 800032c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800032e:	4b94      	ldr	r3, [pc, #592]	; (8000580 <main+0x274>)
 8000330:	2200      	movs	r2, #0
 8000332:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000336:	f3bf 8f4f 	dsb	sy
}
 800033a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800033c:	f3bf 8f6f 	isb	sy
}
 8000340:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000342:	4b8f      	ldr	r3, [pc, #572]	; (8000580 <main+0x274>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	4a8e      	ldr	r2, [pc, #568]	; (8000580 <main+0x274>)
 8000348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800034c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800034e:	f3bf 8f4f 	dsb	sy
}
 8000352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000354:	f3bf 8f6f 	isb	sy
}
 8000358:	e000      	b.n	800035c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800035a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800035c:	4b88      	ldr	r3, [pc, #544]	; (8000580 <main+0x274>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000364:	2b00      	cmp	r3, #0
 8000366:	d143      	bne.n	80003f0 <main+0xe4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000368:	4b85      	ldr	r3, [pc, #532]	; (8000580 <main+0x274>)
 800036a:	2200      	movs	r2, #0
 800036c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000370:	f3bf 8f4f 	dsb	sy
}
 8000374:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000376:	4b82      	ldr	r3, [pc, #520]	; (8000580 <main+0x274>)
 8000378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800037c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000380:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000384:	0b5b      	lsrs	r3, r3, #13
 8000386:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800038a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800038e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000392:	08db      	lsrs	r3, r3, #3
 8000394:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000398:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800039c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80003a0:	015a      	lsls	r2, r3, #5
 80003a2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80003a6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80003a8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80003ac:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003ae:	4974      	ldr	r1, [pc, #464]	; (8000580 <main+0x274>)
 80003b0:	4313      	orrs	r3, r2
 80003b2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80003b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80003ba:	1e5a      	subs	r2, r3, #1
 80003bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d1eb      	bne.n	800039c <main+0x90>
    } while(sets-- != 0U);
 80003c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80003c8:	1e5a      	subs	r2, r3, #1
 80003ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d1dd      	bne.n	800038e <main+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
 80003d2:	f3bf 8f4f 	dsb	sy
}
 80003d6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80003d8:	4b69      	ldr	r3, [pc, #420]	; (8000580 <main+0x274>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a68      	ldr	r2, [pc, #416]	; (8000580 <main+0x274>)
 80003de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003ea:	f3bf 8f6f 	isb	sy
}
 80003ee:	e000      	b.n	80003f2 <main+0xe6>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003f0:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f2:	f001 f911 	bl	8001618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f6:	f000 f8d1 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fa:	f000 fb89 	bl	8000b10 <MX_GPIO_Init>
  MX_TIM17_Init();
 80003fe:	f000 faa5 	bl	800094c <MX_TIM17_Init>
  MX_TIM24_Init();
 8000402:	f000 fb1d 	bl	8000a40 <MX_TIM24_Init>
  MX_TIM16_Init();
 8000406:	f000 fa27 	bl	8000858 <MX_TIM16_Init>
  MX_SPI1_Init();
 800040a:	f000 f977 	bl	80006fc <MX_SPI1_Init>
  MX_I2C1_Init();
 800040e:	f000 f935 	bl	800067c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000412:	f000 f9c9 	bl	80007a8 <MX_SPI2_Init>
	#define AD7794_REF_EXT_2          1
	#define AD7794_REF_INT            2
    uint8_t ch;
    uint8_t currentCh;
	uint8_t inByte;
	uint32_t result = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_Delay(200);

}*/


		HAL_GPIO_WritePin(csSM40_GPIO_Port, csSM40_Pin,GPIO_PIN_SET);
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000422:	4858      	ldr	r0, [pc, #352]	; (8000584 <main+0x278>)
 8000424:	f001 feda 	bl	80021dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(V24Vor_GPIO_Port, V24Vor_Pin, GPIO_PIN_SET);
 8000428:	2201      	movs	r2, #1
 800042a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042e:	4856      	ldr	r0, [pc, #344]	; (8000588 <main+0x27c>)
 8000430:	f001 fed4 	bl	80021dc <HAL_GPIO_WritePin>

		HAL_Delay(200);
 8000434:	20c8      	movs	r0, #200	; 0xc8
 8000436:	f001 f94b 	bl	80016d0 <HAL_Delay>

		HAL_GPIO_WritePin(V24ON_GPIO_Port, V24ON_Pin, GPIO_PIN_SET);
 800043a:	2201      	movs	r2, #1
 800043c:	2101      	movs	r1, #1
 800043e:	4853      	ldr	r0, [pc, #332]	; (800058c <main+0x280>)
 8000440:	f001 fecc 	bl	80021dc <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000444:	20c8      	movs	r0, #200	; 0xc8
 8000446:	f001 f943 	bl	80016d0 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, Weigh_Cell_On_Pin, GPIO_PIN_SET);
 800044a:	2201      	movs	r2, #1
 800044c:	2120      	movs	r1, #32
 800044e:	484f      	ldr	r0, [pc, #316]	; (800058c <main+0x280>)
 8000450:	f001 fec4 	bl	80021dc <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000454:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000458:	f001 f93a 	bl	80016d0 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, Weigh_Cell_On_Pin, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2120      	movs	r1, #32
 8000460:	484a      	ldr	r0, [pc, #296]	; (800058c <main+0x280>)
 8000462:	f001 febb 	bl	80021dc <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000466:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800046a:	f001 f931 	bl	80016d0 <HAL_Delay>
		GPIO_PinState Flag;
		Flag = HAL_GPIO_ReadPin(U_Weigh_Cell_Flag_GPIO_Port, U_Weigh_Cell_Flag_Pin);
 800046e:	2140      	movs	r1, #64	; 0x40
 8000470:	4846      	ldr	r0, [pc, #280]	; (800058c <main+0x280>)
 8000472:	f001 fe9b 	bl	80021ac <HAL_GPIO_ReadPin>
 8000476:	4603      	mov	r3, r0
 8000478:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
		HAL_Delay(200);
 800047c:	20c8      	movs	r0, #200	; 0xc8
 800047e:	f001 f927 	bl	80016d0 <HAL_Delay>




			// Communication Register write to Mode Register 0x8
		    uint8_t DATASEN6[1]={0x8};
 8000482:	2308      	movs	r3, #8
 8000484:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
		    //uint8_t DATAREC6[2]={ 0x00, 0x00};
			HAL_GPIO_WritePin(GPIOB, CS_ADC_Pin,GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800048e:	4840      	ldr	r0, [pc, #256]	; (8000590 <main+0x284>)
 8000490:	f001 fea4 	bl	80021dc <HAL_GPIO_WritePin>
			ret5 = HAL_SPI_Transmit(&hspi2, DATASEN6, 1, 1000);
 8000494:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8000498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800049c:	2201      	movs	r2, #1
 800049e:	483d      	ldr	r0, [pc, #244]	; (8000594 <main+0x288>)
 80004a0:	f004 fc0c 	bl	8004cbc <HAL_SPI_Transmit>
 80004a4:	4603      	mov	r3, r0
 80004a6:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
			HAL_GPIO_WritePin(GPIOB, CS_ADC_Pin,GPIO_PIN_SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004b0:	4837      	ldr	r0, [pc, #220]	; (8000590 <main+0x284>)
 80004b2:	f001 fe93 	bl	80021dc <HAL_GPIO_WritePin>
			HAL_Delay(50);
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f001 f90a 	bl	80016d0 <HAL_Delay>

			// Mode Register      // fADC = 61.7 Hz  120 ms settle
			// 1010 0000 0000 1010
			// 0010 0000 0101 0001
			uint8_t DATASEN2[2]={ 0x20, 0x0A};
 80004bc:	f44f 6322 	mov.w	r3, #2592	; 0xa20
 80004c0:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			HAL_GPIO_WritePin(GPIOB, CS_ADC_Pin,GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ca:	4831      	ldr	r0, [pc, #196]	; (8000590 <main+0x284>)
 80004cc:	f001 fe86 	bl	80021dc <HAL_GPIO_WritePin>
			ret5 = HAL_SPI_Transmit(&hspi2, DATASEN2, 2, 1000);
 80004d0:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80004d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004d8:	2202      	movs	r2, #2
 80004da:	482e      	ldr	r0, [pc, #184]	; (8000594 <main+0x288>)
 80004dc:	f004 fbee 	bl	8004cbc <HAL_SPI_Transmit>
 80004e0:	4603      	mov	r3, r0
 80004e2:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
			HAL_GPIO_WritePin(GPIOB, CS_ADC_Pin,GPIO_PIN_SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ec:	4828      	ldr	r0, [pc, #160]	; (8000590 <main+0x284>)
 80004ee:	f001 fe75 	bl	80021dc <HAL_GPIO_WritePin>
			HAL_Delay(50);
 80004f2:	2032      	movs	r0, #50	; 0x32
 80004f4:	f001 f8ec 	bl	80016d0 <HAL_Delay>

while(1)
{

	// Communication Register to read Data Register
				uint8_t DATASEN8[1]={ 0x58};
 80004f8:	2358      	movs	r3, #88	; 0x58
 80004fa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				HAL_GPIO_WritePin(GPIOB, CS_ADC_Pin,GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000504:	4822      	ldr	r0, [pc, #136]	; (8000590 <main+0x284>)
 8000506:	f001 fe69 	bl	80021dc <HAL_GPIO_WritePin>
				ret5 = HAL_SPI_Transmit(&hspi2, DATASEN8, 1, 1000);
 800050a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	2201      	movs	r2, #1
 8000514:	481f      	ldr	r0, [pc, #124]	; (8000594 <main+0x288>)
 8000516:	f004 fbd1 	bl	8004cbc <HAL_SPI_Transmit>
 800051a:	4603      	mov	r3, r0
 800051c:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
				HAL_GPIO_WritePin(GPIOB, CS_ADC_Pin,GPIO_PIN_SET);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000526:	481a      	ldr	r0, [pc, #104]	; (8000590 <main+0x284>)
 8000528:	f001 fe58 	bl	80021dc <HAL_GPIO_WritePin>
				HAL_Delay(500);
 800052c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000530:	f001 f8ce 	bl	80016d0 <HAL_Delay>

				 //read out AD7795   Data Register
				//uint8_t DATASEN10[3]={ 0x58, 0x00, 0x00};
				uint8_t DATRECV10[3]={0,0,0};
 8000534:	4a18      	ldr	r2, [pc, #96]	; (8000598 <main+0x28c>)
 8000536:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800053a:	6812      	ldr	r2, [r2, #0]
 800053c:	4611      	mov	r1, r2
 800053e:	8019      	strh	r1, [r3, #0]
 8000540:	3302      	adds	r3, #2
 8000542:	0c12      	lsrs	r2, r2, #16
 8000544:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, CS_ADC_Pin,GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800054c:	4810      	ldr	r0, [pc, #64]	; (8000590 <main+0x284>)
 800054e:	f001 fe45 	bl	80021dc <HAL_GPIO_WritePin>
				//ret5 = HAL_SPI_TransmitReceive(&hspi2, DATASEN3, DATRECV3, 3, 100);
				ret5 = HAL_SPI_Receive(&hspi2, DATRECV10, 2,1000);
 8000552:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	2202      	movs	r2, #2
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <main+0x288>)
 800055e:	f004 fda9 	bl	80050b4 <HAL_SPI_Receive>
 8000562:	4603      	mov	r3, r0
 8000564:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
				HAL_GPIO_WritePin(GPIOB, CS_ADC_Pin,GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <main+0x284>)
 8000570:	f001 fe34 	bl	80021dc <HAL_GPIO_WritePin>
				//uint8_t Wert = DATRECV10[2] + DATRECV10[1] + DATRECV10[0];
				HAL_Delay(500);
 8000574:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000578:	f001 f8aa 	bl	80016d0 <HAL_Delay>
{
 800057c:	e7bc      	b.n	80004f8 <main+0x1ec>
 800057e:	bf00      	nop
 8000580:	e000ed00 	.word	0xe000ed00
 8000584:	58021800 	.word	0x58021800
 8000588:	58020000 	.word	0x58020000
 800058c:	58020c00 	.word	0x58020c00
 8000590:	58020400 	.word	0x58020400
 8000594:	24000108 	.word	0x24000108
 8000598:	08006b24 	.word	0x08006b24

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b09c      	sub	sp, #112	; 0x70
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a6:	224c      	movs	r2, #76	; 0x4c
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f006 fa7a 	bl	8006aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2220      	movs	r2, #32
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f006 fa74 	bl	8006aa4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005bc:	2004      	movs	r0, #4
 80005be:	f001 ff69 	bl	8002494 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005c2:	2300      	movs	r3, #0
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	4b2c      	ldr	r3, [pc, #176]	; (8000678 <SystemClock_Config+0xdc>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ce:	4a2a      	ldr	r2, [pc, #168]	; (8000678 <SystemClock_Config+0xdc>)
 80005d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005d4:	6193      	str	r3, [r2, #24]
 80005d6:	4b28      	ldr	r3, [pc, #160]	; (8000678 <SystemClock_Config+0xdc>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005e2:	bf00      	nop
 80005e4:	4b24      	ldr	r3, [pc, #144]	; (8000678 <SystemClock_Config+0xdc>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005f0:	d1f8      	bne.n	80005e4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f2:	2302      	movs	r3, #2
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80005fa:	2340      	movs	r3, #64	; 0x40
 80005fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000602:	2300      	movs	r3, #0
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000606:	2304      	movs	r3, #4
 8000608:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800060a:	230c      	movs	r3, #12
 800060c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800060e:	2301      	movs	r3, #1
 8000610:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000612:	2302      	movs	r3, #2
 8000614:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800061a:	230c      	movs	r3, #12
 800061c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800061e:	2300      	movs	r3, #0
 8000620:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062a:	4618      	mov	r0, r3
 800062c:	f001 ff8c 	bl	8002548 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000636:	f000 fbd1 	bl	8000ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	233f      	movs	r3, #63	; 0x3f
 800063c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2303      	movs	r3, #3
 8000640:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000646:	2308      	movs	r3, #8
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800064a:	2340      	movs	r3, #64	; 0x40
 800064c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800064e:	2340      	movs	r3, #64	; 0x40
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000656:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000658:	2340      	movs	r3, #64	; 0x40
 800065a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2101      	movs	r1, #1
 8000660:	4618      	mov	r0, r3
 8000662:	f002 fb4b 	bl	8002cfc <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800066c:	f000 fbb6 	bl	8000ddc <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3770      	adds	r7, #112	; 0x70
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	58024800 	.word	0x58024800

0800067c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <MX_I2C1_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <MX_I2C1_Init+0x7c>)
 800068a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000694:	2201      	movs	r2, #1
 8000696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b6:	480e      	ldr	r0, [pc, #56]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006b8:	f001 fdaa 	bl	8002210 <HAL_I2C_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006c2:	f000 fb8b 	bl	8000ddc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c6:	2100      	movs	r1, #0
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006ca:	f001 fe4b 	bl	8002364 <HAL_I2CEx_ConfigAnalogFilter>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006d4:	f000 fb82 	bl	8000ddc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d8:	2100      	movs	r1, #0
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006dc:	f001 fe8d 	bl	80023fa <HAL_I2CEx_ConfigDigitalFilter>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 fb79 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2400002c 	.word	0x2400002c
 80006f4:	40005400 	.word	0x40005400
 80006f8:	20303e5d 	.word	0x20303e5d

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <MX_SPI1_Init+0xa4>)
 8000702:	4a28      	ldr	r2, [pc, #160]	; (80007a4 <MX_SPI1_Init+0xa8>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <MX_SPI1_Init+0xa4>)
 8000708:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800070c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <MX_SPI1_Init+0xa4>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_SPI1_Init+0xa4>)
 8000716:	2207      	movs	r2, #7
 8000718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_SPI1_Init+0xa4>)
 800071c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000720:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_SPI1_Init+0xa4>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_SPI1_Init+0xa4>)
 800072a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800072e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_SPI1_Init+0xa4>)
 8000732:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000736:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_SPI1_Init+0xa4>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_SPI1_Init+0xa4>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_SPI1_Init+0xa4>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_SPI1_Init+0xa4>)
 800074c:	2200      	movs	r2, #0
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_SPI1_Init+0xa4>)
 8000752:	2200      	movs	r2, #0
 8000754:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_SPI1_Init+0xa4>)
 8000758:	2200      	movs	r2, #0
 800075a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_SPI1_Init+0xa4>)
 800075e:	2200      	movs	r2, #0
 8000760:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_SPI1_Init+0xa4>)
 8000764:	2200      	movs	r2, #0
 8000766:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <MX_SPI1_Init+0xa4>)
 800076a:	2200      	movs	r2, #0
 800076c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_SPI1_Init+0xa4>)
 8000770:	2200      	movs	r2, #0
 8000772:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_SPI1_Init+0xa4>)
 8000776:	2200      	movs	r2, #0
 8000778:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_SPI1_Init+0xa4>)
 800077c:	2200      	movs	r2, #0
 800077e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <MX_SPI1_Init+0xa4>)
 8000782:	2200      	movs	r2, #0
 8000784:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_SPI1_Init+0xa4>)
 8000788:	2200      	movs	r2, #0
 800078a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_SPI1_Init+0xa4>)
 800078e:	f004 f971 	bl	8004a74 <HAL_SPI_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000798:	f000 fb20 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	24000080 	.word	0x24000080
 80007a4:	40013000 	.word	0x40013000

080007a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <MX_SPI2_Init+0xa8>)
 80007ae:	4a29      	ldr	r2, [pc, #164]	; (8000854 <MX_SPI2_Init+0xac>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b27      	ldr	r3, [pc, #156]	; (8000850 <MX_SPI2_Init+0xa8>)
 80007b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <MX_SPI2_Init+0xa8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <MX_SPI2_Init+0xa8>)
 80007c2:	2207      	movs	r2, #7
 80007c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <MX_SPI2_Init+0xa8>)
 80007c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_SPI2_Init+0xa8>)
 80007d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007d6:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_SPI2_Init+0xa8>)
 80007d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_SPI2_Init+0xa8>)
 80007e0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80007e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_SPI2_Init+0xa8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_SPI2_Init+0xa8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_SPI2_Init+0xa8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_SPI2_Init+0xa8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_SPI2_Init+0xa8>)
 8000800:	2200      	movs	r2, #0
 8000802:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_SPI2_Init+0xa8>)
 8000806:	2200      	movs	r2, #0
 8000808:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_SPI2_Init+0xa8>)
 800080c:	2200      	movs	r2, #0
 800080e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_SPI2_Init+0xa8>)
 8000812:	2200      	movs	r2, #0
 8000814:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_SPI2_Init+0xa8>)
 8000818:	2200      	movs	r2, #0
 800081a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_SPI2_Init+0xa8>)
 800081e:	2200      	movs	r2, #0
 8000820:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_SPI2_Init+0xa8>)
 8000824:	2200      	movs	r2, #0
 8000826:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_SPI2_Init+0xa8>)
 800082a:	2200      	movs	r2, #0
 800082c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_SPI2_Init+0xa8>)
 8000830:	2200      	movs	r2, #0
 8000832:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_SPI2_Init+0xa8>)
 8000836:	2200      	movs	r2, #0
 8000838:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_SPI2_Init+0xa8>)
 800083c:	f004 f91a 	bl	8004a74 <HAL_SPI_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000846:	f000 fac9 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	24000108 	.word	0x24000108
 8000854:	40003800 	.word	0x40003800

08000858 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800085e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
 800086e:	615a      	str	r2, [r3, #20]
 8000870:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000872:	463b      	mov	r3, r7
 8000874:	2234      	movs	r2, #52	; 0x34
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f006 f913 	bl	8006aa4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800087e:	4b31      	ldr	r3, [pc, #196]	; (8000944 <MX_TIM16_Init+0xec>)
 8000880:	4a31      	ldr	r2, [pc, #196]	; (8000948 <MX_TIM16_Init+0xf0>)
 8000882:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000884:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <MX_TIM16_Init+0xec>)
 8000886:	2200      	movs	r2, #0
 8000888:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088a:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <MX_TIM16_Init+0xec>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000890:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <MX_TIM16_Init+0xec>)
 8000892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000896:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <MX_TIM16_Init+0xec>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800089e:	4b29      	ldr	r3, [pc, #164]	; (8000944 <MX_TIM16_Init+0xec>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <MX_TIM16_Init+0xec>)
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008aa:	4826      	ldr	r0, [pc, #152]	; (8000944 <MX_TIM16_Init+0xec>)
 80008ac:	f005 f895 	bl	80059da <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80008b6:	f000 fa91 	bl	8000ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80008ba:	4822      	ldr	r0, [pc, #136]	; (8000944 <MX_TIM16_Init+0xec>)
 80008bc:	f005 f96a 	bl	8005b94 <HAL_TIM_PWM_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80008c6:	f000 fa89 	bl	8000ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ca:	2360      	movs	r3, #96	; 0x60
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d2:	2300      	movs	r3, #0
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008d6:	2300      	movs	r3, #0
 80008d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008de:	2300      	movs	r3, #0
 80008e0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008ea:	2200      	movs	r2, #0
 80008ec:	4619      	mov	r1, r3
 80008ee:	4815      	ldr	r0, [pc, #84]	; (8000944 <MX_TIM16_Init+0xec>)
 80008f0:	f005 fac6 	bl	8005e80 <HAL_TIM_PWM_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80008fa:	f000 fa6f 	bl	8000ddc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000916:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	4619      	mov	r1, r3
 8000924:	4807      	ldr	r0, [pc, #28]	; (8000944 <MX_TIM16_Init+0xec>)
 8000926:	f005 ffff 	bl	8006928 <HAL_TIMEx_ConfigBreakDeadTime>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000930:	f000 fa54 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000934:	4803      	ldr	r0, [pc, #12]	; (8000944 <MX_TIM16_Init+0xec>)
 8000936:	f000 fc83 	bl	8001240 <HAL_TIM_MspPostInit>

}
 800093a:	bf00      	nop
 800093c:	3750      	adds	r7, #80	; 0x50
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	24000190 	.word	0x24000190
 8000948:	40014400 	.word	0x40014400

0800094c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b094      	sub	sp, #80	; 0x50
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000952:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
 8000962:	615a      	str	r2, [r3, #20]
 8000964:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000966:	463b      	mov	r3, r7
 8000968:	2234      	movs	r2, #52	; 0x34
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f006 f899 	bl	8006aa4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000972:	4b31      	ldr	r3, [pc, #196]	; (8000a38 <MX_TIM17_Init+0xec>)
 8000974:	4a31      	ldr	r2, [pc, #196]	; (8000a3c <MX_TIM17_Init+0xf0>)
 8000976:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000978:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <MX_TIM17_Init+0xec>)
 800097a:	2200      	movs	r2, #0
 800097c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <MX_TIM17_Init+0xec>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000984:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <MX_TIM17_Init+0xec>)
 8000986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800098a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098c:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <MX_TIM17_Init+0xec>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000992:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <MX_TIM17_Init+0xec>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000998:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <MX_TIM17_Init+0xec>)
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800099e:	4826      	ldr	r0, [pc, #152]	; (8000a38 <MX_TIM17_Init+0xec>)
 80009a0:	f005 f81b 	bl	80059da <HAL_TIM_Base_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80009aa:	f000 fa17 	bl	8000ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80009ae:	4822      	ldr	r0, [pc, #136]	; (8000a38 <MX_TIM17_Init+0xec>)
 80009b0:	f005 f8f0 	bl	8005b94 <HAL_TIM_PWM_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80009ba:	f000 fa0f 	bl	8000ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009be:	2360      	movs	r3, #96	; 0x60
 80009c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c6:	2300      	movs	r3, #0
 80009c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ca:	2300      	movs	r3, #0
 80009cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009d6:	2300      	movs	r3, #0
 80009d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009de:	2200      	movs	r2, #0
 80009e0:	4619      	mov	r1, r3
 80009e2:	4815      	ldr	r0, [pc, #84]	; (8000a38 <MX_TIM17_Init+0xec>)
 80009e4:	f005 fa4c 	bl	8005e80 <HAL_TIM_PWM_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80009ee:	f000 f9f5 	bl	8000ddc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000a14:	463b      	mov	r3, r7
 8000a16:	4619      	mov	r1, r3
 8000a18:	4807      	ldr	r0, [pc, #28]	; (8000a38 <MX_TIM17_Init+0xec>)
 8000a1a:	f005 ff85 	bl	8006928 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000a24:	f000 f9da 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000a28:	4803      	ldr	r0, [pc, #12]	; (8000a38 <MX_TIM17_Init+0xec>)
 8000a2a:	f000 fc09 	bl	8001240 <HAL_TIM_MspPostInit>

}
 8000a2e:	bf00      	nop
 8000a30:	3750      	adds	r7, #80	; 0x50
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	240001dc 	.word	0x240001dc
 8000a3c:	40014800 	.word	0x40014800

08000a40 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a52:	463b      	mov	r3, r7
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	615a      	str	r2, [r3, #20]
 8000a62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <MX_TIM24_Init+0xc8>)
 8000a66:	4a29      	ldr	r2, [pc, #164]	; (8000b0c <MX_TIM24_Init+0xcc>)
 8000a68:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <MX_TIM24_Init+0xc8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <MX_TIM24_Init+0xc8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <MX_TIM24_Init+0xc8>)
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000a7e:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <MX_TIM24_Init+0xc8>)
 8000a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a84:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a86:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <MX_TIM24_Init+0xc8>)
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim24) != HAL_OK)
 8000a8c:	481e      	ldr	r0, [pc, #120]	; (8000b08 <MX_TIM24_Init+0xc8>)
 8000a8e:	f005 f881 	bl	8005b94 <HAL_TIM_PWM_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM24_Init+0x5c>
  {
    Error_Handler();
 8000a98:	f000 f9a0 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4817      	ldr	r0, [pc, #92]	; (8000b08 <MX_TIM24_Init+0xc8>)
 8000aac:	f005 fea0 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM24_Init+0x7a>
  {
    Error_Handler();
 8000ab6:	f000 f991 	bl	8000ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aba:	2360      	movs	r3, #96	; 0x60
 8000abc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aca:	463b      	mov	r3, r7
 8000acc:	2200      	movs	r2, #0
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <MX_TIM24_Init+0xc8>)
 8000ad2:	f005 f9d5 	bl	8005e80 <HAL_TIM_PWM_ConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM24_Init+0xa0>
  {
    Error_Handler();
 8000adc:	f000 f97e 	bl	8000ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000ae0:	2370      	movs	r3, #112	; 0x70
 8000ae2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4807      	ldr	r0, [pc, #28]	; (8000b08 <MX_TIM24_Init+0xc8>)
 8000aec:	f005 f9c8 	bl	8005e80 <HAL_TIM_PWM_ConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM24_Init+0xba>
  {
    Error_Handler();
 8000af6:	f000 f971 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */
  HAL_TIM_MspPostInit(&htim24);
 8000afa:	4803      	ldr	r0, [pc, #12]	; (8000b08 <MX_TIM24_Init+0xc8>)
 8000afc:	f000 fba0 	bl	8001240 <HAL_TIM_MspPostInit>

}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	24000228 	.word	0x24000228
 8000b0c:	4000e400 	.word	0x4000e400

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4b81      	ldr	r3, [pc, #516]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	4a7f      	ldr	r2, [pc, #508]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b36:	4b7d      	ldr	r3, [pc, #500]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	f003 0302 	and.w	r3, r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b44:	4b79      	ldr	r3, [pc, #484]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4a:	4a78      	ldr	r2, [pc, #480]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b54:	4b75      	ldr	r3, [pc, #468]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b62:	4b72      	ldr	r3, [pc, #456]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b68:	4a70      	ldr	r2, [pc, #448]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000b6a:	f043 0308 	orr.w	r3, r3, #8
 8000b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b72:	4b6e      	ldr	r3, [pc, #440]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	f003 0308 	and.w	r3, r3, #8
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	4b6a      	ldr	r3, [pc, #424]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b86:	4a69      	ldr	r2, [pc, #420]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b90:	4b66      	ldr	r3, [pc, #408]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	4b63      	ldr	r3, [pc, #396]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba4:	4a61      	ldr	r2, [pc, #388]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bae:	4b5f      	ldr	r3, [pc, #380]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bbc:	4b5b      	ldr	r3, [pc, #364]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc2:	4a5a      	ldr	r2, [pc, #360]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000bc4:	f043 0320 	orr.w	r3, r3, #32
 8000bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bcc:	4b57      	ldr	r3, [pc, #348]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	f003 0320 	and.w	r3, r3, #32
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bda:	4b54      	ldr	r3, [pc, #336]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	4a52      	ldr	r2, [pc, #328]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bea:	4b50      	ldr	r3, [pc, #320]	; (8000d2c <MX_GPIO_Init+0x21c>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 0310 	and.w	r3, r3, #16
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ADC_GPIO_Port, CS_ADC_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bfe:	484c      	ldr	r0, [pc, #304]	; (8000d30 <MX_GPIO_Init+0x220>)
 8000c00:	f001 faec 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Weigh_Cell_On_Pin|V24ON_Pin|HX_SCK3_Pin|HX_SCK2_Pin
 8000c04:	2200      	movs	r2, #0
 8000c06:	f24f 0121 	movw	r1, #61473	; 0xf021
 8000c0a:	484a      	ldr	r0, [pc, #296]	; (8000d34 <MX_GPIO_Init+0x224>)
 8000c0c:	f001 fae6 	bl	80021dc <HAL_GPIO_WritePin>
                          |HX_SCK4_Pin|HX_SCK1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT10_Pin|V24Vor_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000c16:	4848      	ldr	r0, [pc, #288]	; (8000d38 <MX_GPIO_Init+0x228>)
 8000c18:	f001 fae0 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(csSM40_GPIO_Port, csSM40_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c22:	4846      	ldr	r0, [pc, #280]	; (8000d3c <MX_GPIO_Init+0x22c>)
 8000c24:	f001 fada 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DirSM40_2_Pin|DirSM40_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	21c0      	movs	r1, #192	; 0xc0
 8000c2c:	4844      	ldr	r0, [pc, #272]	; (8000d40 <MX_GPIO_Init+0x230>)
 8000c2e:	f001 fad5 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OUT7_Pin|csSM40_2_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000c38:	4842      	ldr	r0, [pc, #264]	; (8000d44 <MX_GPIO_Init+0x234>)
 8000c3a:	f001 facf 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_ADC_Pin */
  GPIO_InitStruct.Pin = CS_ADC_Pin;
 8000c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_ADC_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4836      	ldr	r0, [pc, #216]	; (8000d30 <MX_GPIO_Init+0x220>)
 8000c58:	f001 f900 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : Weigh_Cell_On_Pin V24ON_Pin HX_SCK3_Pin HX_SCK2_Pin
                           HX_SCK4_Pin HX_SCK1_Pin */
  GPIO_InitStruct.Pin = Weigh_Cell_On_Pin|V24ON_Pin|HX_SCK3_Pin|HX_SCK2_Pin
 8000c5c:	f24f 0321 	movw	r3, #61473	; 0xf021
 8000c60:	61fb      	str	r3, [r7, #28]
                          |HX_SCK4_Pin|HX_SCK1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	482f      	ldr	r0, [pc, #188]	; (8000d34 <MX_GPIO_Init+0x224>)
 8000c76:	f001 f8f1 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT10_Pin V24Vor_Pin */
  GPIO_InitStruct.Pin = OUT10_Pin|V24Vor_Pin;
 8000c7a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	4829      	ldr	r0, [pc, #164]	; (8000d38 <MX_GPIO_Init+0x228>)
 8000c94:	f001 f8e2 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : csSM40_Pin */
  GPIO_InitStruct.Pin = csSM40_Pin;
 8000c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(csSM40_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4822      	ldr	r0, [pc, #136]	; (8000d3c <MX_GPIO_Init+0x22c>)
 8000cb2:	f001 f8d3 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : U_Weigh_Cell_Flag_Pin */
  GPIO_InitStruct.Pin = U_Weigh_Cell_Flag_Pin;
 8000cb6:	2340      	movs	r3, #64	; 0x40
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(U_Weigh_Cell_Flag_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	481a      	ldr	r0, [pc, #104]	; (8000d34 <MX_GPIO_Init+0x224>)
 8000cca:	f001 f8c7 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : DirSM40_2_Pin DirSM40_Pin */
  GPIO_InitStruct.Pin = DirSM40_2_Pin|DirSM40_Pin;
 8000cce:	23c0      	movs	r3, #192	; 0xc0
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4816      	ldr	r0, [pc, #88]	; (8000d40 <MX_GPIO_Init+0x230>)
 8000ce6:	f001 f8b9 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : HX_DOUT4_Pin HX_DOUT3_Pin HX_DOUT1_Pin HX_DOUT2_Pin */
  GPIO_InitStruct.Pin = HX_DOUT4_Pin|HX_DOUT3_Pin|HX_DOUT1_Pin|HX_DOUT2_Pin;
 8000cea:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4811      	ldr	r0, [pc, #68]	; (8000d44 <MX_GPIO_Init+0x234>)
 8000d00:	f001 f8ac 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT7_Pin csSM40_2_Pin */
  GPIO_InitStruct.Pin = OUT7_Pin|csSM40_2_Pin;
 8000d04:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4809      	ldr	r0, [pc, #36]	; (8000d44 <MX_GPIO_Init+0x234>)
 8000d1e:	f001 f89d 	bl	8001e5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d22:	bf00      	nop
 8000d24:	3730      	adds	r7, #48	; 0x30
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	58024400 	.word	0x58024400
 8000d30:	58020400 	.word	0x58020400
 8000d34:	58020c00 	.word	0x58020c00
 8000d38:	58020000 	.word	0x58020000
 8000d3c:	58021800 	.word	0x58021800
 8000d40:	58020800 	.word	0x58020800
 8000d44:	58021000 	.word	0x58021000

08000d48 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d4e:	463b      	mov	r3, r7
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d5a:	f000 fdbd 	bl	80018d8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d6a:	231f      	movs	r3, #31
 8000d6c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d6e:	2387      	movs	r3, #135	; 0x87
 8000d70:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d76:	2300      	movs	r3, #0
 8000d78:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fddb 	bl	8001948 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d92:	2004      	movs	r0, #4
 8000d94:	f000 fdb8 	bl	8001908 <HAL_MPU_Enable>

}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000db2:	f000 fc6d 	bl	8001690 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if(htim == &htim17)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d104      	bne.n	8000dc8 <HAL_TIM_PeriodElapsedCallback+0x28>
      {
          timerOverflow++;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000dc6:	6013      	str	r3, [r2, #0]
      }

  /* USER CODE END Callback 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40010000 	.word	0x40010000
 8000dd4:	240001dc 	.word	0x240001dc
 8000dd8:	24000274 	.word	0x24000274

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <Error_Handler+0x8>
	...

08000de8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_MspInit+0x30>)
 8000df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000df4:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_MspInit+0x30>)
 8000df6:	f043 0302 	orr.w	r3, r3, #2
 8000dfa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_MspInit+0x30>)
 8000e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	58024400 	.word	0x58024400

08000e1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0b8      	sub	sp, #224	; 0xe0
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	22b8      	movs	r2, #184	; 0xb8
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f005 fe31 	bl	8006aa4 <memset>
  if(hi2c->Instance==I2C1)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a2b      	ldr	r2, [pc, #172]	; (8000ef4 <HAL_I2C_MspInit+0xd8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d14e      	bne.n	8000eea <HAL_I2C_MspInit+0xce>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e4c:	f04f 0208 	mov.w	r2, #8
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	4618      	mov	r0, r3
 8000e64:	f002 fb02 	bl	800346c <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000e6e:	f7ff ffb5 	bl	8000ddc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <HAL_I2C_MspInit+0xdc>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e78:	4a1f      	ldr	r2, [pc, #124]	; (8000ef8 <HAL_I2C_MspInit+0xdc>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e82:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <HAL_I2C_MspInit+0xdc>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8000e90:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e98:	2312      	movs	r3, #18
 8000e9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4811      	ldr	r0, [pc, #68]	; (8000efc <HAL_I2C_MspInit+0xe0>)
 8000eb8:	f000 ffd0 	bl	8001e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_I2C_MspInit+0xdc>)
 8000ebe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_I2C_MspInit+0xdc>)
 8000ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_I2C_MspInit+0xdc>)
 8000ece:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	201f      	movs	r0, #31
 8000ee0:	f000 fcd2 	bl	8001888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ee4:	201f      	movs	r0, #31
 8000ee6:	f000 fce9 	bl	80018bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	37e0      	adds	r7, #224	; 0xe0
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	58020400 	.word	0x58020400

08000f00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0be      	sub	sp, #248	; 0xf8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1c:	22b8      	movs	r2, #184	; 0xb8
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f005 fdbf 	bl	8006aa4 <memset>
  if(hspi->Instance==SPI1)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a8c      	ldr	r2, [pc, #560]	; (800115c <HAL_SPI_MspInit+0x25c>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	f040 8098 	bne.w	8001062 <HAL_SPI_MspInit+0x162>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f002 fa8f 	bl	800346c <HAL_RCCEx_PeriphCLKConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000f54:	f7ff ff42 	bl	8000ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f58:	4b81      	ldr	r3, [pc, #516]	; (8001160 <HAL_SPI_MspInit+0x260>)
 8000f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f5e:	4a80      	ldr	r2, [pc, #512]	; (8001160 <HAL_SPI_MspInit+0x260>)
 8000f60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f68:	4b7d      	ldr	r3, [pc, #500]	; (8001160 <HAL_SPI_MspInit+0x260>)
 8000f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f76:	4b7a      	ldr	r3, [pc, #488]	; (8001160 <HAL_SPI_MspInit+0x260>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7c:	4a78      	ldr	r2, [pc, #480]	; (8001160 <HAL_SPI_MspInit+0x260>)
 8000f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f86:	4b76      	ldr	r3, [pc, #472]	; (8001160 <HAL_SPI_MspInit+0x260>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f90:	623b      	str	r3, [r7, #32]
 8000f92:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f94:	4b72      	ldr	r3, [pc, #456]	; (8001160 <HAL_SPI_MspInit+0x260>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9a:	4a71      	ldr	r2, [pc, #452]	; (8001160 <HAL_SPI_MspInit+0x260>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa4:	4b6e      	ldr	r3, [pc, #440]	; (8001160 <HAL_SPI_MspInit+0x260>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	4b6b      	ldr	r3, [pc, #428]	; (8001160 <HAL_SPI_MspInit+0x260>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	4a69      	ldr	r2, [pc, #420]	; (8001160 <HAL_SPI_MspInit+0x260>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc2:	4b67      	ldr	r3, [pc, #412]	; (8001160 <HAL_SPI_MspInit+0x260>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	61bb      	str	r3, [r7, #24]
 8000fce:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PG9     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fea:	2305      	movs	r3, #5
 8000fec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ff0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	485b      	ldr	r0, [pc, #364]	; (8001164 <HAL_SPI_MspInit+0x264>)
 8000ff8:	f000 ff30 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001014:	2305      	movs	r3, #5
 8001016:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800101e:	4619      	mov	r1, r3
 8001020:	4851      	ldr	r0, [pc, #324]	; (8001168 <HAL_SPI_MspInit+0x268>)
 8001022:	f000 ff1b 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001026:	2320      	movs	r3, #32
 8001028:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800103e:	2305      	movs	r3, #5
 8001040:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001048:	4619      	mov	r1, r3
 800104a:	4848      	ldr	r0, [pc, #288]	; (800116c <HAL_SPI_MspInit+0x26c>)
 800104c:	f000 ff06 	bl	8001e5c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	2023      	movs	r0, #35	; 0x23
 8001056:	f000 fc17 	bl	8001888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800105a:	2023      	movs	r0, #35	; 0x23
 800105c:	f000 fc2e 	bl	80018bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001060:	e077      	b.n	8001152 <HAL_SPI_MspInit+0x252>
  else if(hspi->Instance==SPI2)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a42      	ldr	r2, [pc, #264]	; (8001170 <HAL_SPI_MspInit+0x270>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d172      	bne.n	8001152 <HAL_SPI_MspInit+0x252>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800106c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001082:	4618      	mov	r0, r3
 8001084:	f002 f9f2 	bl	800346c <HAL_RCCEx_PeriphCLKConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_SPI_MspInit+0x192>
      Error_Handler();
 800108e:	f7ff fea5 	bl	8000ddc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001092:	4b33      	ldr	r3, [pc, #204]	; (8001160 <HAL_SPI_MspInit+0x260>)
 8001094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001098:	4a31      	ldr	r2, [pc, #196]	; (8001160 <HAL_SPI_MspInit+0x260>)
 800109a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010a2:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <HAL_SPI_MspInit+0x260>)
 80010a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <HAL_SPI_MspInit+0x260>)
 80010b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b6:	4a2a      	ldr	r2, [pc, #168]	; (8001160 <HAL_SPI_MspInit+0x260>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <HAL_SPI_MspInit+0x260>)
 80010c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	4b24      	ldr	r3, [pc, #144]	; (8001160 <HAL_SPI_MspInit+0x260>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d4:	4a22      	ldr	r2, [pc, #136]	; (8001160 <HAL_SPI_MspInit+0x260>)
 80010d6:	f043 0302 	orr.w	r3, r3, #2
 80010da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <HAL_SPI_MspInit+0x260>)
 80010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ec:	230c      	movs	r3, #12
 80010ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001104:	2305      	movs	r3, #5
 8001106:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800110e:	4619      	mov	r1, r3
 8001110:	4818      	ldr	r0, [pc, #96]	; (8001174 <HAL_SPI_MspInit+0x274>)
 8001112:	f000 fea3 	bl	8001e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800111a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001130:	2305      	movs	r3, #5
 8001132:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800113a:	4619      	mov	r1, r3
 800113c:	480e      	ldr	r0, [pc, #56]	; (8001178 <HAL_SPI_MspInit+0x278>)
 800113e:	f000 fe8d 	bl	8001e5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2024      	movs	r0, #36	; 0x24
 8001148:	f000 fb9e 	bl	8001888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800114c:	2024      	movs	r0, #36	; 0x24
 800114e:	f000 fbb5 	bl	80018bc <HAL_NVIC_EnableIRQ>
}
 8001152:	bf00      	nop
 8001154:	37f8      	adds	r7, #248	; 0xf8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40013000 	.word	0x40013000
 8001160:	58024400 	.word	0x58024400
 8001164:	58021800 	.word	0x58021800
 8001168:	58020c00 	.word	0x58020c00
 800116c:	58020000 	.word	0x58020000
 8001170:	40003800 	.word	0x40003800
 8001174:	58020800 	.word	0x58020800
 8001178:	58020400 	.word	0x58020400

0800117c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <HAL_TIM_Base_MspInit+0x74>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d10f      	bne.n	80011ae <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_TIM_Base_MspInit+0x78>)
 8001190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001194:	4a17      	ldr	r2, [pc, #92]	; (80011f4 <HAL_TIM_Base_MspInit+0x78>)
 8001196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_TIM_Base_MspInit+0x78>)
 80011a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80011ac:	e01b      	b.n	80011e6 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM17)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <HAL_TIM_Base_MspInit+0x7c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d116      	bne.n	80011e6 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_TIM_Base_MspInit+0x78>)
 80011ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011be:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <HAL_TIM_Base_MspInit+0x78>)
 80011c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_TIM_Base_MspInit+0x78>)
 80011ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	2076      	movs	r0, #118	; 0x76
 80011dc:	f000 fb54 	bl	8001888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80011e0:	2076      	movs	r0, #118	; 0x76
 80011e2:	f000 fb6b 	bl	80018bc <HAL_NVIC_EnableIRQ>
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40014400 	.word	0x40014400
 80011f4:	58024400 	.word	0x58024400
 80011f8:	40014800 	.word	0x40014800

080011fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM24)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <HAL_TIM_PWM_MspInit+0x3c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10e      	bne.n	800122c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM24_MspInit 0 */

  /* USER CODE END TIM24_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM24_CLK_ENABLE();
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_TIM_PWM_MspInit+0x40>)
 8001210:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001214:	4a09      	ldr	r2, [pc, #36]	; (800123c <HAL_TIM_PWM_MspInit+0x40>)
 8001216:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800121a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <HAL_TIM_PWM_MspInit+0x40>)
 8001220:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	4000e400 	.word	0x4000e400
 800123c:	58024400 	.word	0x58024400

08001240 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a38      	ldr	r2, [pc, #224]	; (8001340 <HAL_TIM_MspPostInit+0x100>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d11f      	bne.n	80012a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001262:	4b38      	ldr	r3, [pc, #224]	; (8001344 <HAL_TIM_MspPostInit+0x104>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001268:	4a36      	ldr	r2, [pc, #216]	; (8001344 <HAL_TIM_MspPostInit+0x104>)
 800126a:	f043 0320 	orr.w	r3, r3, #32
 800126e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001272:	4b34      	ldr	r3, [pc, #208]	; (8001344 <HAL_TIM_MspPostInit+0x104>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001278:	f003 0320 	and.w	r3, r3, #32
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PF6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001280:	2340      	movs	r3, #64	; 0x40
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001290:	2301      	movs	r3, #1
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	482b      	ldr	r0, [pc, #172]	; (8001348 <HAL_TIM_MspPostInit+0x108>)
 800129c:	f000 fdde 	bl	8001e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspPostInit 1 */

  /* USER CODE END TIM24_MspPostInit 1 */
  }

}
 80012a0:	e049      	b.n	8001336 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM17)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a29      	ldr	r2, [pc, #164]	; (800134c <HAL_TIM_MspPostInit+0x10c>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d11f      	bne.n	80012ec <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <HAL_TIM_MspPostInit+0x104>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b2:	4a24      	ldr	r2, [pc, #144]	; (8001344 <HAL_TIM_MspPostInit+0x104>)
 80012b4:	f043 0320 	orr.w	r3, r3, #32
 80012b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <HAL_TIM_MspPostInit+0x104>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c2:	f003 0320 	and.w	r3, r3, #32
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80012da:	2301      	movs	r3, #1
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4818      	ldr	r0, [pc, #96]	; (8001348 <HAL_TIM_MspPostInit+0x108>)
 80012e6:	f000 fdb9 	bl	8001e5c <HAL_GPIO_Init>
}
 80012ea:	e024      	b.n	8001336 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM24)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a17      	ldr	r2, [pc, #92]	; (8001350 <HAL_TIM_MspPostInit+0x110>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d11f      	bne.n	8001336 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_TIM_MspPostInit+0x104>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	4a11      	ldr	r2, [pc, #68]	; (8001344 <HAL_TIM_MspPostInit+0x104>)
 80012fe:	f043 0320 	orr.w	r3, r3, #32
 8001302:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <HAL_TIM_MspPostInit+0x104>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130c:	f003 0320 	and.w	r3, r3, #32
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001314:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8001326:	230e      	movs	r3, #14
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <HAL_TIM_MspPostInit+0x108>)
 8001332:	f000 fd93 	bl	8001e5c <HAL_GPIO_Init>
}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40014400 	.word	0x40014400
 8001344:	58024400 	.word	0x58024400
 8001348:	58021400 	.word	0x58021400
 800134c:	40014800 	.word	0x40014800
 8001350:	4000e400 	.word	0x4000e400

08001354 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	; 0x38
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b0f      	cmp	r3, #15
 8001360:	d844      	bhi.n	80013ec <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001362:	2200      	movs	r2, #0
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	2019      	movs	r0, #25
 8001368:	f000 fa8e 	bl	8001888 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800136c:	2019      	movs	r0, #25
 800136e:	f000 faa5 	bl	80018bc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001372:	4a24      	ldr	r2, [pc, #144]	; (8001404 <HAL_InitTick+0xb0>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001378:	4b23      	ldr	r3, [pc, #140]	; (8001408 <HAL_InitTick+0xb4>)
 800137a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800137e:	4a22      	ldr	r2, [pc, #136]	; (8001408 <HAL_InitTick+0xb4>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <HAL_InitTick+0xb4>)
 800138a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001396:	f107 020c 	add.w	r2, r7, #12
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 f821 	bl	80033e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80013a6:	f002 f809 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 80013aa:	4603      	mov	r3, r0
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b2:	4a16      	ldr	r2, [pc, #88]	; (800140c <HAL_InitTick+0xb8>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	0c9b      	lsrs	r3, r3, #18
 80013ba:	3b01      	subs	r3, #1
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_InitTick+0xbc>)
 80013c0:	4a14      	ldr	r2, [pc, #80]	; (8001414 <HAL_InitTick+0xc0>)
 80013c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_InitTick+0xbc>)
 80013c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ca:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013cc:	4a10      	ldr	r2, [pc, #64]	; (8001410 <HAL_InitTick+0xbc>)
 80013ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_InitTick+0xbc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_InitTick+0xbc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80013de:	480c      	ldr	r0, [pc, #48]	; (8001410 <HAL_InitTick+0xbc>)
 80013e0:	f004 fafb 	bl	80059da <HAL_TIM_Base_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d107      	bne.n	80013fa <HAL_InitTick+0xa6>
 80013ea:	e001      	b.n	80013f0 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e005      	b.n	80013fc <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <HAL_InitTick+0xbc>)
 80013f2:	f004 fb49 	bl	8005a88 <HAL_TIM_Base_Start_IT>
 80013f6:	4603      	mov	r3, r0
 80013f8:	e000      	b.n	80013fc <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3738      	adds	r7, #56	; 0x38
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	24000008 	.word	0x24000008
 8001408:	58024400 	.word	0x58024400
 800140c:	431bde83 	.word	0x431bde83
 8001410:	24000278 	.word	0x24000278
 8001414:	40010000 	.word	0x40010000

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	e7fe      	b.n	800141c <NMI_Handler+0x4>

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <TIM1_UP_IRQHandler+0x10>)
 8001476:	f004 fbe4 	bl	8005c42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	24000278 	.word	0x24000278

08001484 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <I2C1_EV_IRQHandler+0x10>)
 800148a:	f000 ff51 	bl	8002330 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2400002c 	.word	0x2400002c

08001498 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <SPI1_IRQHandler+0x10>)
 800149e:	f003 ff99 	bl	80053d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	24000080 	.word	0x24000080

080014ac <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <SPI2_IRQHandler+0x10>)
 80014b2:	f003 ff8f 	bl	80053d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	24000108 	.word	0x24000108

080014c0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <TIM17_IRQHandler+0x10>)
 80014c6:	f004 fbbc 	bl	8005c42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	240001dc 	.word	0x240001dc

080014d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014d8:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <SystemInit+0xd0>)
 80014da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014de:	4a31      	ldr	r2, [pc, #196]	; (80015a4 <SystemInit+0xd0>)
 80014e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014e8:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <SystemInit+0xd4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 030f 	and.w	r3, r3, #15
 80014f0:	2b06      	cmp	r3, #6
 80014f2:	d807      	bhi.n	8001504 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014f4:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <SystemInit+0xd4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 030f 	bic.w	r3, r3, #15
 80014fc:	4a2a      	ldr	r2, [pc, #168]	; (80015a8 <SystemInit+0xd4>)
 80014fe:	f043 0307 	orr.w	r3, r3, #7
 8001502:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001504:	4b29      	ldr	r3, [pc, #164]	; (80015ac <SystemInit+0xd8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a28      	ldr	r2, [pc, #160]	; (80015ac <SystemInit+0xd8>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001510:	4b26      	ldr	r3, [pc, #152]	; (80015ac <SystemInit+0xd8>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001516:	4b25      	ldr	r3, [pc, #148]	; (80015ac <SystemInit+0xd8>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4924      	ldr	r1, [pc, #144]	; (80015ac <SystemInit+0xd8>)
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <SystemInit+0xdc>)
 800151e:	4013      	ands	r3, r2
 8001520:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <SystemInit+0xd4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d007      	beq.n	800153e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800152e:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <SystemInit+0xd4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 030f 	bic.w	r3, r3, #15
 8001536:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <SystemInit+0xd4>)
 8001538:	f043 0307 	orr.w	r3, r3, #7
 800153c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <SystemInit+0xd8>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <SystemInit+0xd8>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <SystemInit+0xd8>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <SystemInit+0xd8>)
 8001552:	4a18      	ldr	r2, [pc, #96]	; (80015b4 <SystemInit+0xe0>)
 8001554:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <SystemInit+0xd8>)
 8001558:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <SystemInit+0xe4>)
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <SystemInit+0xd8>)
 800155e:	4a17      	ldr	r2, [pc, #92]	; (80015bc <SystemInit+0xe8>)
 8001560:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <SystemInit+0xd8>)
 8001564:	2200      	movs	r2, #0
 8001566:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001568:	4b10      	ldr	r3, [pc, #64]	; (80015ac <SystemInit+0xd8>)
 800156a:	4a14      	ldr	r2, [pc, #80]	; (80015bc <SystemInit+0xe8>)
 800156c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <SystemInit+0xd8>)
 8001570:	2200      	movs	r2, #0
 8001572:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <SystemInit+0xd8>)
 8001576:	4a11      	ldr	r2, [pc, #68]	; (80015bc <SystemInit+0xe8>)
 8001578:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <SystemInit+0xd8>)
 800157c:	2200      	movs	r2, #0
 800157e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <SystemInit+0xd8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a09      	ldr	r2, [pc, #36]	; (80015ac <SystemInit+0xd8>)
 8001586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <SystemInit+0xd8>)
 800158e:	2200      	movs	r2, #0
 8001590:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <SystemInit+0xec>)
 8001594:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001598:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00
 80015a8:	52002000 	.word	0x52002000
 80015ac:	58024400 	.word	0x58024400
 80015b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80015b4:	02020200 	.word	0x02020200
 80015b8:	01ff0000 	.word	0x01ff0000
 80015bc:	01010280 	.word	0x01010280
 80015c0:	52004000 	.word	0x52004000

080015c4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: ldr   sp, =_estack      /* set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/

  bl  SystemInit
 80015c8:	f7ff ff84 	bl	80014d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ce:	490d      	ldr	r1, [pc, #52]	; (8001604 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e4:	4c0a      	ldr	r4, [pc, #40]	; (8001610 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f2:	f005 fa5f 	bl	8006ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f6:	f7fe fe89 	bl	800030c <main>
  bx  lr
 80015fa:	4770      	bx	lr
Reset_Handler: ldr   sp, =_estack      /* set stack pointer */
 80015fc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001600:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001604:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001608:	08006b68 	.word	0x08006b68
  ldr r2, =_sbss
 800160c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001610:	240002c8 	.word	0x240002c8

08001614 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC3_IRQHandler>
	...

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161e:	2003      	movs	r0, #3
 8001620:	f000 f927 	bl	8001872 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001624:	f001 fd20 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8001628:	4602      	mov	r2, r0
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_Init+0x68>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	4913      	ldr	r1, [pc, #76]	; (8001684 <HAL_Init+0x6c>)
 8001636:	5ccb      	ldrb	r3, [r1, r3]
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
 8001640:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_Init+0x68>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_Init+0x6c>)
 800164c:	5cd3      	ldrb	r3, [r2, r3]
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	fa22 f303 	lsr.w	r3, r2, r3
 8001658:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <HAL_Init+0x70>)
 800165a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800165c:	4a0b      	ldr	r2, [pc, #44]	; (800168c <HAL_Init+0x74>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001662:	200f      	movs	r0, #15
 8001664:	f7ff fe76 	bl	8001354 <HAL_InitTick>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e002      	b.n	8001678 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001672:	f7ff fbb9 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	58024400 	.word	0x58024400
 8001684:	08006b50 	.word	0x08006b50
 8001688:	24000004 	.word	0x24000004
 800168c:	24000000 	.word	0x24000000

08001690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_IncTick+0x20>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_IncTick+0x24>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_IncTick+0x24>)
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	2400000c 	.word	0x2400000c
 80016b4:	240002c4 	.word	0x240002c4

080016b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_GetTick+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	240002c4 	.word	0x240002c4

080016d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff ffee 	bl	80016b8 <HAL_GetTick>
 80016dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e8:	d005      	beq.n	80016f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_Delay+0x44>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4413      	add	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016f6:	bf00      	nop
 80016f8:	f7ff ffde 	bl	80016b8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	429a      	cmp	r2, r3
 8001706:	d8f7      	bhi.n	80016f8 <HAL_Delay+0x28>
  {
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2400000c 	.word	0x2400000c

08001718 <__NVIC_SetPriorityGrouping>:
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <__NVIC_SetPriorityGrouping+0x40>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001734:	4013      	ands	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	4313      	orrs	r3, r2
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	; (8001758 <__NVIC_SetPriorityGrouping+0x40>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00
 800175c:	05fa0000 	.word	0x05fa0000

08001760 <__NVIC_GetPriorityGrouping>:
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <__NVIC_GetPriorityGrouping+0x18>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	f003 0307 	and.w	r3, r3, #7
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_EnableIRQ>:
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178a:	2b00      	cmp	r3, #0
 800178c:	db0b      	blt.n	80017a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	f003 021f 	and.w	r2, r3, #31
 8001794:	4907      	ldr	r1, [pc, #28]	; (80017b4 <__NVIC_EnableIRQ+0x38>)
 8001796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	2001      	movs	r0, #1
 800179e:	fa00 f202 	lsl.w	r2, r0, r2
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <__NVIC_SetPriority>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db0a      	blt.n	80017e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	490c      	ldr	r1, [pc, #48]	; (8001804 <__NVIC_SetPriority+0x4c>)
 80017d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	440b      	add	r3, r1
 80017dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017e0:	e00a      	b.n	80017f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4908      	ldr	r1, [pc, #32]	; (8001808 <__NVIC_SetPriority+0x50>)
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	761a      	strb	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <NVIC_EncodePriority>:
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 32ff 	mov.w	r2, #4294967295
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43d9      	mvns	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ff4c 	bl	8001718 <__NVIC_SetPriorityGrouping>
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001896:	f7ff ff63 	bl	8001760 <__NVIC_GetPriorityGrouping>
 800189a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	6978      	ldr	r0, [r7, #20]
 80018a2:	f7ff ffb3 	bl	800180c <NVIC_EncodePriority>
 80018a6:	4602      	mov	r2, r0
 80018a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff82 	bl	80017b8 <__NVIC_SetPriority>
}
 80018b4:	bf00      	nop
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff56 	bl	800177c <__NVIC_EnableIRQ>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80018dc:	f3bf 8f5f 	dmb	sy
}
 80018e0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_MPU_Disable+0x28>)
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_MPU_Disable+0x28>)
 80018e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ec:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80018ee:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_MPU_Disable+0x2c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	605a      	str	r2, [r3, #4]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00
 8001904:	e000ed90 	.word	0xe000ed90

08001908 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001910:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <HAL_MPU_Enable+0x38>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_MPU_Enable+0x3c>)
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <HAL_MPU_Enable+0x3c>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001926:	f3bf 8f4f 	dsb	sy
}
 800192a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192c:	f3bf 8f6f 	isb	sy
}
 8001930:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed90 	.word	0xe000ed90
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	785a      	ldrb	r2, [r3, #1]
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_MPU_ConfigRegion+0x84>)
 8001956:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d029      	beq.n	80019b4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001960:	4a1a      	ldr	r2, [pc, #104]	; (80019cc <HAL_MPU_ConfigRegion+0x84>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7b1b      	ldrb	r3, [r3, #12]
 800196c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7adb      	ldrb	r3, [r3, #11]
 8001972:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001974:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7a9b      	ldrb	r3, [r3, #10]
 800197a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800197c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7b5b      	ldrb	r3, [r3, #13]
 8001982:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001984:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7b9b      	ldrb	r3, [r3, #14]
 800198a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800198c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7bdb      	ldrb	r3, [r3, #15]
 8001992:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001994:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7a5b      	ldrb	r3, [r3, #9]
 800199a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800199c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7a1b      	ldrb	r3, [r3, #8]
 80019a2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019a4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	7812      	ldrb	r2, [r2, #0]
 80019aa:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019ae:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019b0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80019b2:	e005      	b.n	80019c0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_MPU_ConfigRegion+0x84>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <HAL_MPU_ConfigRegion+0x84>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed90 	.word	0xe000ed90

080019d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e237      	b.n	8001e52 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d004      	beq.n	80019f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e22c      	b.n	8001e52 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a5c      	ldr	r2, [pc, #368]	; (8001b70 <HAL_DMA_Abort_IT+0x1a0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d04a      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a5b      	ldr	r2, [pc, #364]	; (8001b74 <HAL_DMA_Abort_IT+0x1a4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d045      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a59      	ldr	r2, [pc, #356]	; (8001b78 <HAL_DMA_Abort_IT+0x1a8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d040      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a58      	ldr	r2, [pc, #352]	; (8001b7c <HAL_DMA_Abort_IT+0x1ac>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d03b      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a56      	ldr	r2, [pc, #344]	; (8001b80 <HAL_DMA_Abort_IT+0x1b0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d036      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a55      	ldr	r2, [pc, #340]	; (8001b84 <HAL_DMA_Abort_IT+0x1b4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d031      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a53      	ldr	r2, [pc, #332]	; (8001b88 <HAL_DMA_Abort_IT+0x1b8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d02c      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a52      	ldr	r2, [pc, #328]	; (8001b8c <HAL_DMA_Abort_IT+0x1bc>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d027      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a50      	ldr	r2, [pc, #320]	; (8001b90 <HAL_DMA_Abort_IT+0x1c0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d022      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a4f      	ldr	r2, [pc, #316]	; (8001b94 <HAL_DMA_Abort_IT+0x1c4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d01d      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a4d      	ldr	r2, [pc, #308]	; (8001b98 <HAL_DMA_Abort_IT+0x1c8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d018      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a4c      	ldr	r2, [pc, #304]	; (8001b9c <HAL_DMA_Abort_IT+0x1cc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d013      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a4a      	ldr	r2, [pc, #296]	; (8001ba0 <HAL_DMA_Abort_IT+0x1d0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00e      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a49      	ldr	r2, [pc, #292]	; (8001ba4 <HAL_DMA_Abort_IT+0x1d4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d009      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a47      	ldr	r2, [pc, #284]	; (8001ba8 <HAL_DMA_Abort_IT+0x1d8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d004      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xc8>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a46      	ldr	r2, [pc, #280]	; (8001bac <HAL_DMA_Abort_IT+0x1dc>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d101      	bne.n	8001a9c <HAL_DMA_Abort_IT+0xcc>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_DMA_Abort_IT+0xce>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 8086 	beq.w	8001bb0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2f      	ldr	r2, [pc, #188]	; (8001b70 <HAL_DMA_Abort_IT+0x1a0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d04a      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x17c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a2e      	ldr	r2, [pc, #184]	; (8001b74 <HAL_DMA_Abort_IT+0x1a4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d045      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x17c>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a2c      	ldr	r2, [pc, #176]	; (8001b78 <HAL_DMA_Abort_IT+0x1a8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d040      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x17c>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a2b      	ldr	r2, [pc, #172]	; (8001b7c <HAL_DMA_Abort_IT+0x1ac>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d03b      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x17c>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <HAL_DMA_Abort_IT+0x1b0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d036      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x17c>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a28      	ldr	r2, [pc, #160]	; (8001b84 <HAL_DMA_Abort_IT+0x1b4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d031      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x17c>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a26      	ldr	r2, [pc, #152]	; (8001b88 <HAL_DMA_Abort_IT+0x1b8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d02c      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x17c>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a25      	ldr	r2, [pc, #148]	; (8001b8c <HAL_DMA_Abort_IT+0x1bc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d027      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x17c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a23      	ldr	r2, [pc, #140]	; (8001b90 <HAL_DMA_Abort_IT+0x1c0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d022      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x17c>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <HAL_DMA_Abort_IT+0x1c4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d01d      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x17c>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a20      	ldr	r2, [pc, #128]	; (8001b98 <HAL_DMA_Abort_IT+0x1c8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d018      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x17c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a1f      	ldr	r2, [pc, #124]	; (8001b9c <HAL_DMA_Abort_IT+0x1cc>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d013      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x17c>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <HAL_DMA_Abort_IT+0x1d0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00e      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x17c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a1c      	ldr	r2, [pc, #112]	; (8001ba4 <HAL_DMA_Abort_IT+0x1d4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d009      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x17c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a1a      	ldr	r2, [pc, #104]	; (8001ba8 <HAL_DMA_Abort_IT+0x1d8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d004      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x17c>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a19      	ldr	r2, [pc, #100]	; (8001bac <HAL_DMA_Abort_IT+0x1dc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d108      	bne.n	8001b5e <HAL_DMA_Abort_IT+0x18e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e178      	b.n	8001e50 <HAL_DMA_Abort_IT+0x480>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e16f      	b.n	8001e50 <HAL_DMA_Abort_IT+0x480>
 8001b70:	40020010 	.word	0x40020010
 8001b74:	40020028 	.word	0x40020028
 8001b78:	40020040 	.word	0x40020040
 8001b7c:	40020058 	.word	0x40020058
 8001b80:	40020070 	.word	0x40020070
 8001b84:	40020088 	.word	0x40020088
 8001b88:	400200a0 	.word	0x400200a0
 8001b8c:	400200b8 	.word	0x400200b8
 8001b90:	40020410 	.word	0x40020410
 8001b94:	40020428 	.word	0x40020428
 8001b98:	40020440 	.word	0x40020440
 8001b9c:	40020458 	.word	0x40020458
 8001ba0:	40020470 	.word	0x40020470
 8001ba4:	40020488 	.word	0x40020488
 8001ba8:	400204a0 	.word	0x400204a0
 8001bac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 020e 	bic.w	r2, r2, #14
 8001bbe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6c      	ldr	r2, [pc, #432]	; (8001d78 <HAL_DMA_Abort_IT+0x3a8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d04a      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x290>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a6b      	ldr	r2, [pc, #428]	; (8001d7c <HAL_DMA_Abort_IT+0x3ac>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d045      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x290>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a69      	ldr	r2, [pc, #420]	; (8001d80 <HAL_DMA_Abort_IT+0x3b0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d040      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x290>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a68      	ldr	r2, [pc, #416]	; (8001d84 <HAL_DMA_Abort_IT+0x3b4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d03b      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x290>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a66      	ldr	r2, [pc, #408]	; (8001d88 <HAL_DMA_Abort_IT+0x3b8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d036      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x290>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a65      	ldr	r2, [pc, #404]	; (8001d8c <HAL_DMA_Abort_IT+0x3bc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d031      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x290>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a63      	ldr	r2, [pc, #396]	; (8001d90 <HAL_DMA_Abort_IT+0x3c0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d02c      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x290>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a62      	ldr	r2, [pc, #392]	; (8001d94 <HAL_DMA_Abort_IT+0x3c4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d027      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x290>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a60      	ldr	r2, [pc, #384]	; (8001d98 <HAL_DMA_Abort_IT+0x3c8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d022      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x290>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a5f      	ldr	r2, [pc, #380]	; (8001d9c <HAL_DMA_Abort_IT+0x3cc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d01d      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x290>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a5d      	ldr	r2, [pc, #372]	; (8001da0 <HAL_DMA_Abort_IT+0x3d0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d018      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x290>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a5c      	ldr	r2, [pc, #368]	; (8001da4 <HAL_DMA_Abort_IT+0x3d4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d013      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x290>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a5a      	ldr	r2, [pc, #360]	; (8001da8 <HAL_DMA_Abort_IT+0x3d8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00e      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x290>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a59      	ldr	r2, [pc, #356]	; (8001dac <HAL_DMA_Abort_IT+0x3dc>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d009      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x290>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a57      	ldr	r2, [pc, #348]	; (8001db0 <HAL_DMA_Abort_IT+0x3e0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d004      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x290>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a56      	ldr	r2, [pc, #344]	; (8001db4 <HAL_DMA_Abort_IT+0x3e4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d108      	bne.n	8001c72 <HAL_DMA_Abort_IT+0x2a2>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	e007      	b.n	8001c82 <HAL_DMA_Abort_IT+0x2b2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0201 	bic.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a3c      	ldr	r2, [pc, #240]	; (8001d78 <HAL_DMA_Abort_IT+0x3a8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d072      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a3a      	ldr	r2, [pc, #232]	; (8001d7c <HAL_DMA_Abort_IT+0x3ac>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d06d      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a39      	ldr	r2, [pc, #228]	; (8001d80 <HAL_DMA_Abort_IT+0x3b0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d068      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a37      	ldr	r2, [pc, #220]	; (8001d84 <HAL_DMA_Abort_IT+0x3b4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d063      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a36      	ldr	r2, [pc, #216]	; (8001d88 <HAL_DMA_Abort_IT+0x3b8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d05e      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a34      	ldr	r2, [pc, #208]	; (8001d8c <HAL_DMA_Abort_IT+0x3bc>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d059      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a33      	ldr	r2, [pc, #204]	; (8001d90 <HAL_DMA_Abort_IT+0x3c0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d054      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a31      	ldr	r2, [pc, #196]	; (8001d94 <HAL_DMA_Abort_IT+0x3c4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d04f      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a30      	ldr	r2, [pc, #192]	; (8001d98 <HAL_DMA_Abort_IT+0x3c8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d04a      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a2e      	ldr	r2, [pc, #184]	; (8001d9c <HAL_DMA_Abort_IT+0x3cc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d045      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a2d      	ldr	r2, [pc, #180]	; (8001da0 <HAL_DMA_Abort_IT+0x3d0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d040      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a2b      	ldr	r2, [pc, #172]	; (8001da4 <HAL_DMA_Abort_IT+0x3d4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d03b      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a2a      	ldr	r2, [pc, #168]	; (8001da8 <HAL_DMA_Abort_IT+0x3d8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d036      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a28      	ldr	r2, [pc, #160]	; (8001dac <HAL_DMA_Abort_IT+0x3dc>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d031      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a27      	ldr	r2, [pc, #156]	; (8001db0 <HAL_DMA_Abort_IT+0x3e0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d02c      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <HAL_DMA_Abort_IT+0x3e4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d027      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a24      	ldr	r2, [pc, #144]	; (8001db8 <HAL_DMA_Abort_IT+0x3e8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d022      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a22      	ldr	r2, [pc, #136]	; (8001dbc <HAL_DMA_Abort_IT+0x3ec>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01d      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a21      	ldr	r2, [pc, #132]	; (8001dc0 <HAL_DMA_Abort_IT+0x3f0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d018      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1f      	ldr	r2, [pc, #124]	; (8001dc4 <HAL_DMA_Abort_IT+0x3f4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <HAL_DMA_Abort_IT+0x3f8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00e      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <HAL_DMA_Abort_IT+0x3fc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d009      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <HAL_DMA_Abort_IT+0x400>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d004      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x3a2>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <HAL_DMA_Abort_IT+0x404>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d132      	bne.n	8001dd8 <HAL_DMA_Abort_IT+0x408>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e031      	b.n	8001dda <HAL_DMA_Abort_IT+0x40a>
 8001d76:	bf00      	nop
 8001d78:	40020010 	.word	0x40020010
 8001d7c:	40020028 	.word	0x40020028
 8001d80:	40020040 	.word	0x40020040
 8001d84:	40020058 	.word	0x40020058
 8001d88:	40020070 	.word	0x40020070
 8001d8c:	40020088 	.word	0x40020088
 8001d90:	400200a0 	.word	0x400200a0
 8001d94:	400200b8 	.word	0x400200b8
 8001d98:	40020410 	.word	0x40020410
 8001d9c:	40020428 	.word	0x40020428
 8001da0:	40020440 	.word	0x40020440
 8001da4:	40020458 	.word	0x40020458
 8001da8:	40020470 	.word	0x40020470
 8001dac:	40020488 	.word	0x40020488
 8001db0:	400204a0 	.word	0x400204a0
 8001db4:	400204b8 	.word	0x400204b8
 8001db8:	58025408 	.word	0x58025408
 8001dbc:	5802541c 	.word	0x5802541c
 8001dc0:	58025430 	.word	0x58025430
 8001dc4:	58025444 	.word	0x58025444
 8001dc8:	58025458 	.word	0x58025458
 8001dcc:	5802546c 	.word	0x5802546c
 8001dd0:	58025480 	.word	0x58025480
 8001dd4:	58025494 	.word	0x58025494
 8001dd8:	2300      	movs	r3, #0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d028      	beq.n	8001e30 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e0c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00c      	beq.n	8001e30 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e24:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e2e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop

08001e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e6a:	4b86      	ldr	r3, [pc, #536]	; (8002084 <HAL_GPIO_Init+0x228>)
 8001e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e6e:	e18c      	b.n	800218a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 817e 	beq.w	8002184 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d005      	beq.n	8001ea0 <HAL_GPIO_Init+0x44>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d130      	bne.n	8001f02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	f003 0201 	and.w	r2, r3, #1
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d017      	beq.n	8001f3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d123      	bne.n	8001f92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	08da      	lsrs	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3208      	adds	r2, #8
 8001f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	220f      	movs	r2, #15
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	08da      	lsrs	r2, r3, #3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3208      	adds	r2, #8
 8001f8c:	69b9      	ldr	r1, [r7, #24]
 8001f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0203 	and.w	r2, r3, #3
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80d8 	beq.w	8002184 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd4:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <HAL_GPIO_Init+0x22c>)
 8001fd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fda:	4a2b      	ldr	r2, [pc, #172]	; (8002088 <HAL_GPIO_Init+0x22c>)
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fe4:	4b28      	ldr	r3, [pc, #160]	; (8002088 <HAL_GPIO_Init+0x22c>)
 8001fe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ff2:	4a26      	ldr	r2, [pc, #152]	; (800208c <HAL_GPIO_Init+0x230>)
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	220f      	movs	r2, #15
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <HAL_GPIO_Init+0x234>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d04a      	beq.n	80020b4 <HAL_GPIO_Init+0x258>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <HAL_GPIO_Init+0x238>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d02b      	beq.n	800207e <HAL_GPIO_Init+0x222>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <HAL_GPIO_Init+0x23c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d025      	beq.n	800207a <HAL_GPIO_Init+0x21e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a1a      	ldr	r2, [pc, #104]	; (800209c <HAL_GPIO_Init+0x240>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01f      	beq.n	8002076 <HAL_GPIO_Init+0x21a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <HAL_GPIO_Init+0x244>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d019      	beq.n	8002072 <HAL_GPIO_Init+0x216>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a18      	ldr	r2, [pc, #96]	; (80020a4 <HAL_GPIO_Init+0x248>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0x212>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <HAL_GPIO_Init+0x24c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00d      	beq.n	800206a <HAL_GPIO_Init+0x20e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a16      	ldr	r2, [pc, #88]	; (80020ac <HAL_GPIO_Init+0x250>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_Init+0x20a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <HAL_GPIO_Init+0x254>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_GPIO_Init+0x206>
 800205e:	2309      	movs	r3, #9
 8002060:	e029      	b.n	80020b6 <HAL_GPIO_Init+0x25a>
 8002062:	230a      	movs	r3, #10
 8002064:	e027      	b.n	80020b6 <HAL_GPIO_Init+0x25a>
 8002066:	2307      	movs	r3, #7
 8002068:	e025      	b.n	80020b6 <HAL_GPIO_Init+0x25a>
 800206a:	2306      	movs	r3, #6
 800206c:	e023      	b.n	80020b6 <HAL_GPIO_Init+0x25a>
 800206e:	2305      	movs	r3, #5
 8002070:	e021      	b.n	80020b6 <HAL_GPIO_Init+0x25a>
 8002072:	2304      	movs	r3, #4
 8002074:	e01f      	b.n	80020b6 <HAL_GPIO_Init+0x25a>
 8002076:	2303      	movs	r3, #3
 8002078:	e01d      	b.n	80020b6 <HAL_GPIO_Init+0x25a>
 800207a:	2302      	movs	r3, #2
 800207c:	e01b      	b.n	80020b6 <HAL_GPIO_Init+0x25a>
 800207e:	2301      	movs	r3, #1
 8002080:	e019      	b.n	80020b6 <HAL_GPIO_Init+0x25a>
 8002082:	bf00      	nop
 8002084:	58000080 	.word	0x58000080
 8002088:	58024400 	.word	0x58024400
 800208c:	58000400 	.word	0x58000400
 8002090:	58020000 	.word	0x58020000
 8002094:	58020400 	.word	0x58020400
 8002098:	58020800 	.word	0x58020800
 800209c:	58020c00 	.word	0x58020c00
 80020a0:	58021000 	.word	0x58021000
 80020a4:	58021400 	.word	0x58021400
 80020a8:	58021800 	.word	0x58021800
 80020ac:	58021c00 	.word	0x58021c00
 80020b0:	58022400 	.word	0x58022400
 80020b4:	2300      	movs	r3, #0
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	f002 0203 	and.w	r2, r2, #3
 80020bc:	0092      	lsls	r2, r2, #2
 80020be:	4093      	lsls	r3, r2
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c6:	4938      	ldr	r1, [pc, #224]	; (80021a8 <HAL_GPIO_Init+0x34c>)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	3302      	adds	r3, #2
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	3301      	adds	r3, #1
 8002188:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	f47f ae6b 	bne.w	8001e70 <HAL_GPIO_Init+0x14>
  }
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	3724      	adds	r7, #36	; 0x24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	58000400 	.word	0x58000400

080021ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	887b      	ldrh	r3, [r7, #2]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	e001      	b.n	80021ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	807b      	strh	r3, [r7, #2]
 80021e8:	4613      	mov	r3, r2
 80021ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ec:	787b      	ldrb	r3, [r7, #1]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021f2:	887a      	ldrh	r2, [r7, #2]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80021f8:	e003      	b.n	8002202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021fa:	887b      	ldrh	r3, [r7, #2]
 80021fc:	041a      	lsls	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	619a      	str	r2, [r3, #24]
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe fdf0 	bl	8000e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2224      	movs	r2, #36	; 0x24
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002260:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002270:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d107      	bne.n	800228a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	e006      	b.n	8002298 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002296:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d104      	bne.n	80022aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_I2C_Init+0x11c>)
 80022b6:	430b      	orrs	r3, r1
 80022b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69d9      	ldr	r1, [r3, #28]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1a      	ldr	r2, [r3, #32]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	02008000 	.word	0x02008000

08002330 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	68f9      	ldr	r1, [r7, #12]
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4798      	blx	r3
  }
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b20      	cmp	r3, #32
 8002378:	d138      	bne.n	80023ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002384:	2302      	movs	r3, #2
 8002386:	e032      	b.n	80023ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2224      	movs	r2, #36	; 0x24
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6819      	ldr	r1, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023ec:	2302      	movs	r3, #2
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b085      	sub	sp, #20
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b20      	cmp	r3, #32
 800240e:	d139      	bne.n	8002484 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800241a:	2302      	movs	r3, #2
 800241c:	e033      	b.n	8002486 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2224      	movs	r2, #36	; 0x24
 800242a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800244c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	e000      	b.n	8002486 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002484:	2302      	movs	r3, #2
  }
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800249c:	4b29      	ldr	r3, [pc, #164]	; (8002544 <HAL_PWREx_ConfigSupply+0xb0>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	2b06      	cmp	r3, #6
 80024a6:	d00a      	beq.n	80024be <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024a8:	4b26      	ldr	r3, [pc, #152]	; (8002544 <HAL_PWREx_ConfigSupply+0xb0>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d001      	beq.n	80024ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e03f      	b.n	800253a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e03d      	b.n	800253a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024be:	4b21      	ldr	r3, [pc, #132]	; (8002544 <HAL_PWREx_ConfigSupply+0xb0>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80024c6:	491f      	ldr	r1, [pc, #124]	; (8002544 <HAL_PWREx_ConfigSupply+0xb0>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024ce:	f7ff f8f3 	bl	80016b8 <HAL_GetTick>
 80024d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024d4:	e009      	b.n	80024ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024d6:	f7ff f8ef 	bl	80016b8 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024e4:	d901      	bls.n	80024ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e027      	b.n	800253a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024ea:	4b16      	ldr	r3, [pc, #88]	; (8002544 <HAL_PWREx_ConfigSupply+0xb0>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f6:	d1ee      	bne.n	80024d6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b1e      	cmp	r3, #30
 80024fc:	d008      	beq.n	8002510 <HAL_PWREx_ConfigSupply+0x7c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b2e      	cmp	r3, #46	; 0x2e
 8002502:	d005      	beq.n	8002510 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b1d      	cmp	r3, #29
 8002508:	d002      	beq.n	8002510 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b2d      	cmp	r3, #45	; 0x2d
 800250e:	d113      	bne.n	8002538 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002510:	f7ff f8d2 	bl	80016b8 <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002516:	e009      	b.n	800252c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002518:	f7ff f8ce 	bl	80016b8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002526:	d901      	bls.n	800252c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e006      	b.n	800253a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_PWREx_ConfigSupply+0xb0>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0311 	and.w	r3, r3, #17
 8002534:	2b11      	cmp	r3, #17
 8002536:	d1ef      	bne.n	8002518 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	58024800 	.word	0x58024800

08002548 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08c      	sub	sp, #48	; 0x30
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e3c8      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8087 	beq.w	8002676 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002568:	4b88      	ldr	r3, [pc, #544]	; (800278c <HAL_RCC_OscConfig+0x244>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002572:	4b86      	ldr	r3, [pc, #536]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	2b10      	cmp	r3, #16
 800257c:	d007      	beq.n	800258e <HAL_RCC_OscConfig+0x46>
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	2b18      	cmp	r3, #24
 8002582:	d110      	bne.n	80025a6 <HAL_RCC_OscConfig+0x5e>
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d10b      	bne.n	80025a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258e:	4b7f      	ldr	r3, [pc, #508]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d06c      	beq.n	8002674 <HAL_RCC_OscConfig+0x12c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d168      	bne.n	8002674 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e3a2      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x76>
 80025b0:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a75      	ldr	r2, [pc, #468]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	e02e      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x98>
 80025c6:	4b71      	ldr	r3, [pc, #452]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a70      	ldr	r2, [pc, #448]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b6e      	ldr	r3, [pc, #440]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a6d      	ldr	r2, [pc, #436]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e01d      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0xbc>
 80025ea:	4b68      	ldr	r3, [pc, #416]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a67      	ldr	r2, [pc, #412]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b65      	ldr	r3, [pc, #404]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a64      	ldr	r2, [pc, #400]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e00b      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 8002604:	4b61      	ldr	r3, [pc, #388]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a60      	ldr	r2, [pc, #384]	; (800278c <HAL_RCC_OscConfig+0x244>)
 800260a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b5e      	ldr	r3, [pc, #376]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a5d      	ldr	r2, [pc, #372]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800261a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d013      	beq.n	800264c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7ff f848 	bl	80016b8 <HAL_GetTick>
 8002628:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800262c:	f7ff f844 	bl	80016b8 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	; 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e356      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800263e:	4b53      	ldr	r3, [pc, #332]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0xe4>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7ff f834 	bl	80016b8 <HAL_GetTick>
 8002650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002654:	f7ff f830 	bl	80016b8 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e342      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002666:	4b49      	ldr	r3, [pc, #292]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x10c>
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 808c 	beq.w	800279c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002684:	4b41      	ldr	r3, [pc, #260]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800268c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800268e:	4b3f      	ldr	r3, [pc, #252]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_RCC_OscConfig+0x162>
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	2b18      	cmp	r3, #24
 800269e:	d137      	bne.n	8002710 <HAL_RCC_OscConfig+0x1c8>
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d132      	bne.n	8002710 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026aa:	4b38      	ldr	r3, [pc, #224]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_RCC_OscConfig+0x17a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e314      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026c2:	4b32      	ldr	r3, [pc, #200]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0219 	bic.w	r2, r3, #25
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	492f      	ldr	r1, [pc, #188]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fff0 	bl	80016b8 <HAL_GetTick>
 80026d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026dc:	f7fe ffec 	bl	80016b8 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e2fe      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ee:	4b27      	ldr	r3, [pc, #156]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fa:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_RCC_OscConfig+0x244>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	061b      	lsls	r3, r3, #24
 8002708:	4920      	ldr	r1, [pc, #128]	; (800278c <HAL_RCC_OscConfig+0x244>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800270e:	e045      	b.n	800279c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d026      	beq.n	8002766 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002718:	4b1c      	ldr	r3, [pc, #112]	; (800278c <HAL_RCC_OscConfig+0x244>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f023 0219 	bic.w	r2, r3, #25
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4919      	ldr	r1, [pc, #100]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7fe ffc5 	bl	80016b8 <HAL_GetTick>
 800272e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002732:	f7fe ffc1 	bl	80016b8 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e2d3      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002750:	4b0e      	ldr	r3, [pc, #56]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	061b      	lsls	r3, r3, #24
 800275e:	490b      	ldr	r1, [pc, #44]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
 8002764:	e01a      	b.n	800279c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_RCC_OscConfig+0x244>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a08      	ldr	r2, [pc, #32]	; (800278c <HAL_RCC_OscConfig+0x244>)
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7fe ffa1 	bl	80016b8 <HAL_GetTick>
 8002776:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277a:	f7fe ff9d 	bl	80016b8 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d903      	bls.n	8002790 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e2af      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
 800278c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002790:	4b96      	ldr	r3, [pc, #600]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ee      	bne.n	800277a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d06a      	beq.n	800287e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a8:	4b90      	ldr	r3, [pc, #576]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027b0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027b2:	4b8e      	ldr	r3, [pc, #568]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d007      	beq.n	80027ce <HAL_RCC_OscConfig+0x286>
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b18      	cmp	r3, #24
 80027c2:	d11b      	bne.n	80027fc <HAL_RCC_OscConfig+0x2b4>
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d116      	bne.n	80027fc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027ce:	4b87      	ldr	r3, [pc, #540]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_RCC_OscConfig+0x29e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	2b80      	cmp	r3, #128	; 0x80
 80027e0:	d001      	beq.n	80027e6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e282      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027e6:	4b81      	ldr	r3, [pc, #516]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	061b      	lsls	r3, r3, #24
 80027f4:	497d      	ldr	r1, [pc, #500]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027fa:	e040      	b.n	800287e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d023      	beq.n	800284c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002804:	4b79      	ldr	r3, [pc, #484]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a78      	ldr	r2, [pc, #480]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 800280a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800280e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7fe ff52 	bl	80016b8 <HAL_GetTick>
 8002814:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002818:	f7fe ff4e 	bl	80016b8 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e260      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800282a:	4b70      	ldr	r3, [pc, #448]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002836:	4b6d      	ldr	r3, [pc, #436]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	061b      	lsls	r3, r3, #24
 8002844:	4969      	ldr	r1, [pc, #420]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	60cb      	str	r3, [r1, #12]
 800284a:	e018      	b.n	800287e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800284c:	4b67      	ldr	r3, [pc, #412]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a66      	ldr	r2, [pc, #408]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe ff2e 	bl	80016b8 <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002860:	f7fe ff2a 	bl	80016b8 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e23c      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002872:	4b5e      	ldr	r3, [pc, #376]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d036      	beq.n	80028f8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d019      	beq.n	80028c6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002892:	4b56      	ldr	r3, [pc, #344]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002896:	4a55      	ldr	r2, [pc, #340]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289e:	f7fe ff0b 	bl	80016b8 <HAL_GetTick>
 80028a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a6:	f7fe ff07 	bl	80016b8 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e219      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028b8:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80028ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x35e>
 80028c4:	e018      	b.n	80028f8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c6:	4b49      	ldr	r3, [pc, #292]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80028c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ca:	4a48      	ldr	r2, [pc, #288]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d2:	f7fe fef1 	bl	80016b8 <HAL_GetTick>
 80028d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028da:	f7fe feed 	bl	80016b8 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e1ff      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028ec:	4b3f      	ldr	r3, [pc, #252]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80028ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d036      	beq.n	8002972 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d019      	beq.n	8002940 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800290c:	4b37      	ldr	r3, [pc, #220]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a36      	ldr	r2, [pc, #216]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002912:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002916:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002918:	f7fe fece 	bl	80016b8 <HAL_GetTick>
 800291c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002920:	f7fe feca 	bl	80016b8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e1dc      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002932:	4b2e      	ldr	r3, [pc, #184]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x3d8>
 800293e:	e018      	b.n	8002972 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002940:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a29      	ldr	r2, [pc, #164]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800294a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800294c:	f7fe feb4 	bl	80016b8 <HAL_GetTick>
 8002950:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002954:	f7fe feb0 	bl	80016b8 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e1c2      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002966:	4b21      	ldr	r3, [pc, #132]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8086 	beq.w	8002a8c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <HAL_RCC_OscConfig+0x4a8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1a      	ldr	r2, [pc, #104]	; (80029f0 <HAL_RCC_OscConfig+0x4a8>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800298c:	f7fe fe94 	bl	80016b8 <HAL_GetTick>
 8002990:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002994:	f7fe fe90 	bl	80016b8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e1a2      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_RCC_OscConfig+0x4a8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d106      	bne.n	80029c8 <HAL_RCC_OscConfig+0x480>
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6713      	str	r3, [r2, #112]	; 0x70
 80029c6:	e032      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e6>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d111      	bne.n	80029f4 <HAL_RCC_OscConfig+0x4ac>
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	4a05      	ldr	r2, [pc, #20]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80029d6:	f023 0301 	bic.w	r3, r3, #1
 80029da:	6713      	str	r3, [r2, #112]	; 0x70
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a02      	ldr	r2, [pc, #8]	; (80029ec <HAL_RCC_OscConfig+0x4a4>)
 80029e2:	f023 0304 	bic.w	r3, r3, #4
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
 80029e8:	e021      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e6>
 80029ea:	bf00      	nop
 80029ec:	58024400 	.word	0x58024400
 80029f0:	58024800 	.word	0x58024800
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d10c      	bne.n	8002a16 <HAL_RCC_OscConfig+0x4ce>
 80029fc:	4b83      	ldr	r3, [pc, #524]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	4a82      	ldr	r2, [pc, #520]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a02:	f043 0304 	orr.w	r3, r3, #4
 8002a06:	6713      	str	r3, [r2, #112]	; 0x70
 8002a08:	4b80      	ldr	r3, [pc, #512]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	4a7f      	ldr	r2, [pc, #508]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6713      	str	r3, [r2, #112]	; 0x70
 8002a14:	e00b      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e6>
 8002a16:	4b7d      	ldr	r3, [pc, #500]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	4a7c      	ldr	r2, [pc, #496]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	6713      	str	r3, [r2, #112]	; 0x70
 8002a22:	4b7a      	ldr	r3, [pc, #488]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	4a79      	ldr	r2, [pc, #484]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a28:	f023 0304 	bic.w	r3, r3, #4
 8002a2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d015      	beq.n	8002a62 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7fe fe3f 	bl	80016b8 <HAL_GetTick>
 8002a3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7fe fe3b 	bl	80016b8 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e14b      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a54:	4b6d      	ldr	r3, [pc, #436]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0ee      	beq.n	8002a3e <HAL_RCC_OscConfig+0x4f6>
 8002a60:	e014      	b.n	8002a8c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a62:	f7fe fe29 	bl	80016b8 <HAL_GetTick>
 8002a66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7fe fe25 	bl	80016b8 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e135      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a80:	4b62      	ldr	r3, [pc, #392]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ee      	bne.n	8002a6a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 812a 	beq.w	8002cea <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a96:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a9e:	2b18      	cmp	r3, #24
 8002aa0:	f000 80ba 	beq.w	8002c18 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	f040 8095 	bne.w	8002bd8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aae:	4b57      	ldr	r3, [pc, #348]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a56      	ldr	r2, [pc, #344]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002ab4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7fe fdfd 	bl	80016b8 <HAL_GetTick>
 8002abe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe fdf9 	bl	80016b8 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e10b      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ad4:	4b4d      	ldr	r3, [pc, #308]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f0      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae0:	4b4a      	ldr	r3, [pc, #296]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002ae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae4:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <HAL_RCC_OscConfig+0x6c8>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002af0:	0112      	lsls	r2, r2, #4
 8002af2:	430a      	orrs	r2, r1
 8002af4:	4945      	ldr	r1, [pc, #276]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	628b      	str	r3, [r1, #40]	; 0x28
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	3b01      	subs	r3, #1
 8002b00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	025b      	lsls	r3, r3, #9
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b14:	3b01      	subs	r3, #1
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b22:	3b01      	subs	r3, #1
 8002b24:	061b      	lsls	r3, r3, #24
 8002b26:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b2a:	4938      	ldr	r1, [pc, #224]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b30:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	4a35      	ldr	r2, [pc, #212]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b3c:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b40:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <HAL_RCC_OscConfig+0x6cc>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b48:	00d2      	lsls	r2, r2, #3
 8002b4a:	4930      	ldr	r1, [pc, #192]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b50:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	f023 020c 	bic.w	r2, r3, #12
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	492b      	ldr	r1, [pc, #172]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b62:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	f023 0202 	bic.w	r2, r3, #2
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	4927      	ldr	r1, [pc, #156]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b74:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	4a24      	ldr	r2, [pc, #144]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b80:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	4a21      	ldr	r2, [pc, #132]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b98:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	4a1b      	ldr	r2, [pc, #108]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fd82 	bl	80016b8 <HAL_GetTick>
 8002bb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe fd7e 	bl	80016b8 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e090      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x670>
 8002bd6:	e088      	b.n	8002cea <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a0b      	ldr	r2, [pc, #44]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fe fd68 	bl	80016b8 <HAL_GetTick>
 8002be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bec:	f7fe fd64 	bl	80016b8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e076      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bfe:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <HAL_RCC_OscConfig+0x6c4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x6a4>
 8002c0a:	e06e      	b.n	8002cea <HAL_RCC_OscConfig+0x7a2>
 8002c0c:	58024400 	.word	0x58024400
 8002c10:	fffffc0c 	.word	0xfffffc0c
 8002c14:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c18:	4b36      	ldr	r3, [pc, #216]	; (8002cf4 <HAL_RCC_OscConfig+0x7ac>)
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c1e:	4b35      	ldr	r3, [pc, #212]	; (8002cf4 <HAL_RCC_OscConfig+0x7ac>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d031      	beq.n	8002c90 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f003 0203 	and.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d12a      	bne.n	8002c90 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d122      	bne.n	8002c90 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d11a      	bne.n	8002c90 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	0a5b      	lsrs	r3, r3, #9
 8002c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d111      	bne.n	8002c90 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	0c1b      	lsrs	r3, r3, #16
 8002c70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d108      	bne.n	8002c90 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	0e1b      	lsrs	r3, r3, #24
 8002c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e02b      	b.n	8002cec <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c94:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <HAL_RCC_OscConfig+0x7ac>)
 8002c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c98:	08db      	lsrs	r3, r3, #3
 8002c9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c9e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d01f      	beq.n	8002cea <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_RCC_OscConfig+0x7ac>)
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	4a11      	ldr	r2, [pc, #68]	; (8002cf4 <HAL_RCC_OscConfig+0x7ac>)
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cb6:	f7fe fcff 	bl	80016b8 <HAL_GetTick>
 8002cba:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002cbc:	bf00      	nop
 8002cbe:	f7fe fcfb 	bl	80016b8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d0f9      	beq.n	8002cbe <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <HAL_RCC_OscConfig+0x7ac>)
 8002ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_RCC_OscConfig+0x7b0>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cd6:	00d2      	lsls	r2, r2, #3
 8002cd8:	4906      	ldr	r1, [pc, #24]	; (8002cf4 <HAL_RCC_OscConfig+0x7ac>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RCC_OscConfig+0x7ac>)
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <HAL_RCC_OscConfig+0x7ac>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3730      	adds	r7, #48	; 0x30
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	58024400 	.word	0x58024400
 8002cf8:	ffff0007 	.word	0xffff0007

08002cfc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e19c      	b.n	800304a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b8a      	ldr	r3, [pc, #552]	; (8002f3c <HAL_RCC_ClockConfig+0x240>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d910      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b87      	ldr	r3, [pc, #540]	; (8002f3c <HAL_RCC_ClockConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 020f 	bic.w	r2, r3, #15
 8002d26:	4985      	ldr	r1, [pc, #532]	; (8002f3c <HAL_RCC_ClockConfig+0x240>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b83      	ldr	r3, [pc, #524]	; (8002f3c <HAL_RCC_ClockConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e184      	b.n	800304a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d010      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	4b7b      	ldr	r3, [pc, #492]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d908      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d5c:	4b78      	ldr	r3, [pc, #480]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	4975      	ldr	r1, [pc, #468]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d010      	beq.n	8002d9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695a      	ldr	r2, [r3, #20]
 8002d7e:	4b70      	ldr	r3, [pc, #448]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d908      	bls.n	8002d9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d8a:	4b6d      	ldr	r3, [pc, #436]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	496a      	ldr	r1, [pc, #424]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d010      	beq.n	8002dca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699a      	ldr	r2, [r3, #24]
 8002dac:	4b64      	ldr	r3, [pc, #400]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d908      	bls.n	8002dca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002db8:	4b61      	ldr	r3, [pc, #388]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	495e      	ldr	r1, [pc, #376]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d010      	beq.n	8002df8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69da      	ldr	r2, [r3, #28]
 8002dda:	4b59      	ldr	r3, [pc, #356]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d908      	bls.n	8002df8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002de6:	4b56      	ldr	r3, [pc, #344]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	4953      	ldr	r1, [pc, #332]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	4b4d      	ldr	r3, [pc, #308]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d908      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e14:	4b4a      	ldr	r3, [pc, #296]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f023 020f 	bic.w	r2, r3, #15
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4947      	ldr	r1, [pc, #284]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d055      	beq.n	8002ede <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e32:	4b43      	ldr	r3, [pc, #268]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	4940      	ldr	r1, [pc, #256]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d107      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e4c:	4b3c      	ldr	r3, [pc, #240]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d121      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0f6      	b.n	800304a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d107      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e64:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d115      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0ea      	b.n	800304a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d107      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e7c:	4b30      	ldr	r3, [pc, #192]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d109      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0de      	b.n	800304a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e8c:	4b2c      	ldr	r3, [pc, #176]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0d6      	b.n	800304a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e9c:	4b28      	ldr	r3, [pc, #160]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f023 0207 	bic.w	r2, r3, #7
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4925      	ldr	r1, [pc, #148]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eae:	f7fe fc03 	bl	80016b8 <HAL_GetTick>
 8002eb2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb6:	f7fe fbff 	bl	80016b8 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0be      	b.n	800304a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ecc:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d1eb      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d010      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d208      	bcs.n	8002f0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	f023 020f 	bic.w	r2, r3, #15
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	490e      	ldr	r1, [pc, #56]	; (8002f40 <HAL_RCC_ClockConfig+0x244>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_ClockConfig+0x240>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d214      	bcs.n	8002f44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <HAL_RCC_ClockConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 020f 	bic.w	r2, r3, #15
 8002f22:	4906      	ldr	r1, [pc, #24]	; (8002f3c <HAL_RCC_ClockConfig+0x240>)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <HAL_RCC_ClockConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e086      	b.n	800304a <HAL_RCC_ClockConfig+0x34e>
 8002f3c:	52002000 	.word	0x52002000
 8002f40:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d010      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <HAL_RCC_ClockConfig+0x358>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d208      	bcs.n	8002f72 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f60:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <HAL_RCC_ClockConfig+0x358>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	4939      	ldr	r1, [pc, #228]	; (8003054 <HAL_RCC_ClockConfig+0x358>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d010      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	4b34      	ldr	r3, [pc, #208]	; (8003054 <HAL_RCC_ClockConfig+0x358>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d208      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f8e:	4b31      	ldr	r3, [pc, #196]	; (8003054 <HAL_RCC_ClockConfig+0x358>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	492e      	ldr	r1, [pc, #184]	; (8003054 <HAL_RCC_ClockConfig+0x358>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d010      	beq.n	8002fce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	4b28      	ldr	r3, [pc, #160]	; (8003054 <HAL_RCC_ClockConfig+0x358>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d208      	bcs.n	8002fce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fbc:	4b25      	ldr	r3, [pc, #148]	; (8003054 <HAL_RCC_ClockConfig+0x358>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	4922      	ldr	r1, [pc, #136]	; (8003054 <HAL_RCC_ClockConfig+0x358>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d010      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <HAL_RCC_ClockConfig+0x358>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d208      	bcs.n	8002ffc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fea:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <HAL_RCC_ClockConfig+0x358>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	4917      	ldr	r1, [pc, #92]	; (8003054 <HAL_RCC_ClockConfig+0x358>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ffc:	f000 f834 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_RCC_ClockConfig+0x358>)
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	4912      	ldr	r1, [pc, #72]	; (8003058 <HAL_RCC_ClockConfig+0x35c>)
 800300e:	5ccb      	ldrb	r3, [r1, r3]
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	fa22 f303 	lsr.w	r3, r2, r3
 8003018:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800301a:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <HAL_RCC_ClockConfig+0x358>)
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	4a0d      	ldr	r2, [pc, #52]	; (8003058 <HAL_RCC_ClockConfig+0x35c>)
 8003024:	5cd3      	ldrb	r3, [r2, r3]
 8003026:	f003 031f 	and.w	r3, r3, #31
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	fa22 f303 	lsr.w	r3, r2, r3
 8003030:	4a0a      	ldr	r2, [pc, #40]	; (800305c <HAL_RCC_ClockConfig+0x360>)
 8003032:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003034:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <HAL_RCC_ClockConfig+0x364>)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_RCC_ClockConfig+0x368>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe f988 	bl	8001354 <HAL_InitTick>
 8003044:	4603      	mov	r3, r0
 8003046:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	58024400 	.word	0x58024400
 8003058:	08006b50 	.word	0x08006b50
 800305c:	24000004 	.word	0x24000004
 8003060:	24000000 	.word	0x24000000
 8003064:	24000008 	.word	0x24000008

08003068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	; 0x24
 800306c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800306e:	4bb3      	ldr	r3, [pc, #716]	; (800333c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003076:	2b18      	cmp	r3, #24
 8003078:	f200 8155 	bhi.w	8003326 <HAL_RCC_GetSysClockFreq+0x2be>
 800307c:	a201      	add	r2, pc, #4	; (adr r2, 8003084 <HAL_RCC_GetSysClockFreq+0x1c>)
 800307e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003082:	bf00      	nop
 8003084:	080030e9 	.word	0x080030e9
 8003088:	08003327 	.word	0x08003327
 800308c:	08003327 	.word	0x08003327
 8003090:	08003327 	.word	0x08003327
 8003094:	08003327 	.word	0x08003327
 8003098:	08003327 	.word	0x08003327
 800309c:	08003327 	.word	0x08003327
 80030a0:	08003327 	.word	0x08003327
 80030a4:	0800310f 	.word	0x0800310f
 80030a8:	08003327 	.word	0x08003327
 80030ac:	08003327 	.word	0x08003327
 80030b0:	08003327 	.word	0x08003327
 80030b4:	08003327 	.word	0x08003327
 80030b8:	08003327 	.word	0x08003327
 80030bc:	08003327 	.word	0x08003327
 80030c0:	08003327 	.word	0x08003327
 80030c4:	08003115 	.word	0x08003115
 80030c8:	08003327 	.word	0x08003327
 80030cc:	08003327 	.word	0x08003327
 80030d0:	08003327 	.word	0x08003327
 80030d4:	08003327 	.word	0x08003327
 80030d8:	08003327 	.word	0x08003327
 80030dc:	08003327 	.word	0x08003327
 80030e0:	08003327 	.word	0x08003327
 80030e4:	0800311b 	.word	0x0800311b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030e8:	4b94      	ldr	r3, [pc, #592]	; (800333c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d009      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030f4:	4b91      	ldr	r3, [pc, #580]	; (800333c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	08db      	lsrs	r3, r3, #3
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	4a90      	ldr	r2, [pc, #576]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
 8003104:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003106:	e111      	b.n	800332c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003108:	4b8d      	ldr	r3, [pc, #564]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800310a:	61bb      	str	r3, [r7, #24]
      break;
 800310c:	e10e      	b.n	800332c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800310e:	4b8d      	ldr	r3, [pc, #564]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003110:	61bb      	str	r3, [r7, #24]
      break;
 8003112:	e10b      	b.n	800332c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003114:	4b8c      	ldr	r3, [pc, #560]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003116:	61bb      	str	r3, [r7, #24]
      break;
 8003118:	e108      	b.n	800332c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800311a:	4b88      	ldr	r3, [pc, #544]	; (800333c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003124:	4b85      	ldr	r3, [pc, #532]	; (800333c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800312e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003130:	4b82      	ldr	r3, [pc, #520]	; (800333c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800313a:	4b80      	ldr	r3, [pc, #512]	; (800333c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313e:	08db      	lsrs	r3, r3, #3
 8003140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	fb02 f303 	mul.w	r3, r2, r3
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003152:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80e1 	beq.w	8003320 <HAL_RCC_GetSysClockFreq+0x2b8>
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b02      	cmp	r3, #2
 8003162:	f000 8083 	beq.w	800326c <HAL_RCC_GetSysClockFreq+0x204>
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b02      	cmp	r3, #2
 800316a:	f200 80a1 	bhi.w	80032b0 <HAL_RCC_GetSysClockFreq+0x248>
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x114>
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d056      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x1c0>
 800317a:	e099      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800317c:	4b6f      	ldr	r3, [pc, #444]	; (800333c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d02d      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003188:	4b6c      	ldr	r3, [pc, #432]	; (800333c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	08db      	lsrs	r3, r3, #3
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	4a6b      	ldr	r2, [pc, #428]	; (8003340 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
 8003198:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	ee07 3a90 	vmov	s15, r3
 80031a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031b2:	4b62      	ldr	r3, [pc, #392]	; (800333c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800334c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80031e2:	e087      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003350 <HAL_RCC_GetSysClockFreq+0x2e8>
 80031f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031f6:	4b51      	ldr	r3, [pc, #324]	; (800333c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fe:	ee07 3a90 	vmov	s15, r3
 8003202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003206:	ed97 6a02 	vldr	s12, [r7, #8]
 800320a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800334c <HAL_RCC_GetSysClockFreq+0x2e4>
 800320e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800321a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003222:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003226:	e065      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003232:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003354 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800323a:	4b40      	ldr	r3, [pc, #256]	; (800333c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800324a:	ed97 6a02 	vldr	s12, [r7, #8]
 800324e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800334c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800325a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800325e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003266:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800326a:	e043      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003276:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003358 <HAL_RCC_GetSysClockFreq+0x2f0>
 800327a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327e:	4b2f      	ldr	r3, [pc, #188]	; (800333c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800328e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003292:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800334c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800329a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032ae:	e021      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	ee07 3a90 	vmov	s15, r3
 80032b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003354 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032c2:	4b1e      	ldr	r3, [pc, #120]	; (800333c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800334c <HAL_RCC_GetSysClockFreq+0x2e4>
 80032da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	0a5b      	lsrs	r3, r3, #9
 80032fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032fe:	3301      	adds	r3, #1
 8003300:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	ee07 3a90 	vmov	s15, r3
 8003308:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800330c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003318:	ee17 3a90 	vmov	r3, s15
 800331c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800331e:	e005      	b.n	800332c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	61bb      	str	r3, [r7, #24]
      break;
 8003324:	e002      	b.n	800332c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003326:	4b07      	ldr	r3, [pc, #28]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003328:	61bb      	str	r3, [r7, #24]
      break;
 800332a:	bf00      	nop
  }

  return sysclockfreq;
 800332c:	69bb      	ldr	r3, [r7, #24]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3724      	adds	r7, #36	; 0x24
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	58024400 	.word	0x58024400
 8003340:	03d09000 	.word	0x03d09000
 8003344:	003d0900 	.word	0x003d0900
 8003348:	017d7840 	.word	0x017d7840
 800334c:	46000000 	.word	0x46000000
 8003350:	4c742400 	.word	0x4c742400
 8003354:	4a742400 	.word	0x4a742400
 8003358:	4bbebc20 	.word	0x4bbebc20

0800335c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003362:	f7ff fe81 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8003366:	4602      	mov	r2, r0
 8003368:	4b10      	ldr	r3, [pc, #64]	; (80033ac <HAL_RCC_GetHCLKFreq+0x50>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	0a1b      	lsrs	r3, r3, #8
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	490f      	ldr	r1, [pc, #60]	; (80033b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003374:	5ccb      	ldrb	r3, [r1, r3]
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	fa22 f303 	lsr.w	r3, r2, r3
 800337e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003380:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <HAL_RCC_GetHCLKFreq+0x50>)
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800338a:	5cd3      	ldrb	r3, [r2, r3]
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	fa22 f303 	lsr.w	r3, r2, r3
 8003396:	4a07      	ldr	r2, [pc, #28]	; (80033b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003398:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800339a:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	58024400 	.word	0x58024400
 80033b0:	08006b50 	.word	0x08006b50
 80033b4:	24000004 	.word	0x24000004
 80033b8:	24000000 	.word	0x24000000

080033bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80033c0:	f7ff ffcc 	bl	800335c <HAL_RCC_GetHCLKFreq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4904      	ldr	r1, [pc, #16]	; (80033e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033d2:	5ccb      	ldrb	r3, [r1, r3]
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	58024400 	.word	0x58024400
 80033e4:	08006b50 	.word	0x08006b50

080033e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	223f      	movs	r2, #63	; 0x3f
 80033f6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033f8:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <HAL_RCC_GetClockConfig+0x7c>)
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f003 0207 	and.w	r2, r3, #7
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003404:	4b17      	ldr	r3, [pc, #92]	; (8003464 <HAL_RCC_GetClockConfig+0x7c>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <HAL_RCC_GetClockConfig+0x7c>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f003 020f 	and.w	r2, r3, #15
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_RCC_GetClockConfig+0x7c>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003428:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <HAL_RCC_GetClockConfig+0x7c>)
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_GetClockConfig+0x7c>)
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_RCC_GetClockConfig+0x7c>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800344c:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_RCC_GetClockConfig+0x80>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 020f 	and.w	r2, r3, #15
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	601a      	str	r2, [r3, #0]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	58024400 	.word	0x58024400
 8003468:	52002000 	.word	0x52002000

0800346c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800346c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003470:	b0c6      	sub	sp, #280	; 0x118
 8003472:	af00      	add	r7, sp, #0
 8003474:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003478:	2300      	movs	r3, #0
 800347a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800347e:	2300      	movs	r3, #0
 8003480:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003490:	2500      	movs	r5, #0
 8003492:	ea54 0305 	orrs.w	r3, r4, r5
 8003496:	d049      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800349c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034a2:	d02f      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80034a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034a8:	d828      	bhi.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ae:	d01a      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b4:	d822      	bhi.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034be:	d007      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034c0:	e01c      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c2:	4bab      	ldr	r3, [pc, #684]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	4aaa      	ldr	r2, [pc, #680]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034ce:	e01a      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034d4:	3308      	adds	r3, #8
 80034d6:	2102      	movs	r1, #2
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 f967 	bl	80047ac <RCCEx_PLL2_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034e4:	e00f      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034ea:	3328      	adds	r3, #40	; 0x28
 80034ec:	2102      	movs	r1, #2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f001 fa0e 	bl	8004910 <RCCEx_PLL3_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034fa:	e004      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003502:	e000      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003506:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800350e:	4b98      	ldr	r3, [pc, #608]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003512:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800351a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800351c:	4a94      	ldr	r2, [pc, #592]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800351e:	430b      	orrs	r3, r1
 8003520:	6513      	str	r3, [r2, #80]	; 0x50
 8003522:	e003      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003524:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003528:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800352c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003538:	f04f 0900 	mov.w	r9, #0
 800353c:	ea58 0309 	orrs.w	r3, r8, r9
 8003540:	d047      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	2b04      	cmp	r3, #4
 800354a:	d82a      	bhi.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800354c:	a201      	add	r2, pc, #4	; (adr r2, 8003554 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800354e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003552:	bf00      	nop
 8003554:	08003569 	.word	0x08003569
 8003558:	08003577 	.word	0x08003577
 800355c:	0800358d 	.word	0x0800358d
 8003560:	080035ab 	.word	0x080035ab
 8003564:	080035ab 	.word	0x080035ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003568:	4b81      	ldr	r3, [pc, #516]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	4a80      	ldr	r2, [pc, #512]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800356e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003572:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003574:	e01a      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800357a:	3308      	adds	r3, #8
 800357c:	2100      	movs	r1, #0
 800357e:	4618      	mov	r0, r3
 8003580:	f001 f914 	bl	80047ac <RCCEx_PLL2_Config>
 8003584:	4603      	mov	r3, r0
 8003586:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800358a:	e00f      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800358c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003590:	3328      	adds	r3, #40	; 0x28
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f001 f9bb 	bl	8004910 <RCCEx_PLL3_Config>
 800359a:	4603      	mov	r3, r0
 800359c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035a0:	e004      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80035a8:	e000      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80035aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035b4:	4b6e      	ldr	r3, [pc, #440]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b8:	f023 0107 	bic.w	r1, r3, #7
 80035bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c2:	4a6b      	ldr	r2, [pc, #428]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6513      	str	r3, [r2, #80]	; 0x50
 80035c8:	e003      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80035de:	f04f 0b00 	mov.w	fp, #0
 80035e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80035e6:	d05b      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80035e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035f0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80035f4:	d03b      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80035f6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80035fa:	d834      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80035fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003600:	d037      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003602:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003606:	d82e      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003608:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800360c:	d033      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800360e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003612:	d828      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003618:	d01a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800361a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800361e:	d822      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003624:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003628:	d007      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800362a:	e01c      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362c:	4b50      	ldr	r3, [pc, #320]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	4a4f      	ldr	r2, [pc, #316]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003638:	e01e      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800363a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800363e:	3308      	adds	r3, #8
 8003640:	2100      	movs	r1, #0
 8003642:	4618      	mov	r0, r3
 8003644:	f001 f8b2 	bl	80047ac <RCCEx_PLL2_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800364e:	e013      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003654:	3328      	adds	r3, #40	; 0x28
 8003656:	2100      	movs	r1, #0
 8003658:	4618      	mov	r0, r3
 800365a:	f001 f959 	bl	8004910 <RCCEx_PLL3_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003664:	e008      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800366c:	e004      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800366e:	bf00      	nop
 8003670:	e002      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003678:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10b      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003680:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003684:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800368c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003690:	4a37      	ldr	r2, [pc, #220]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003692:	430b      	orrs	r3, r1
 8003694:	6593      	str	r3, [r2, #88]	; 0x58
 8003696:	e003      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003698:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800369c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80036a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80036ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80036b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80036ba:	460b      	mov	r3, r1
 80036bc:	4313      	orrs	r3, r2
 80036be:	d05d      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80036c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036c8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80036cc:	d03b      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80036ce:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80036d2:	d834      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80036d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036d8:	d037      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80036da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036de:	d82e      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80036e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036e4:	d033      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80036e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036ea:	d828      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80036ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036f0:	d01a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80036f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036f6:	d822      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80036fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003700:	d007      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003702:	e01c      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003704:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	4a19      	ldr	r2, [pc, #100]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800370a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003710:	e01e      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003716:	3308      	adds	r3, #8
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f001 f846 	bl	80047ac <RCCEx_PLL2_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003726:	e013      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800372c:	3328      	adds	r3, #40	; 0x28
 800372e:	2100      	movs	r1, #0
 8003730:	4618      	mov	r0, r3
 8003732:	f001 f8ed 	bl	8004910 <RCCEx_PLL3_Config>
 8003736:	4603      	mov	r3, r0
 8003738:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800373c:	e008      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003744:	e004      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003746:	bf00      	nop
 8003748:	e002      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800374a:	bf00      	nop
 800374c:	e000      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800374e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003750:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10d      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800375a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003764:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003768:	4a01      	ldr	r2, [pc, #4]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800376a:	430b      	orrs	r3, r1
 800376c:	6593      	str	r3, [r2, #88]	; 0x58
 800376e:	e005      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003770:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003774:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003778:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800377c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003788:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003792:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003796:	460b      	mov	r3, r1
 8003798:	4313      	orrs	r3, r2
 800379a:	d03a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800379c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a2:	2b30      	cmp	r3, #48	; 0x30
 80037a4:	d01f      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80037a6:	2b30      	cmp	r3, #48	; 0x30
 80037a8:	d819      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x372>
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d00c      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d815      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x372>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d019      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	d111      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ba:	4baa      	ldr	r3, [pc, #680]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	4aa9      	ldr	r2, [pc, #676]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80037c6:	e011      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037cc:	3308      	adds	r3, #8
 80037ce:	2102      	movs	r1, #2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 ffeb 	bl	80047ac <RCCEx_PLL2_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80037dc:	e006      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80037e4:	e002      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80037e6:	bf00      	nop
 80037e8:	e000      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80037ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10a      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80037f4:	4b9b      	ldr	r3, [pc, #620]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80037fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003802:	4a98      	ldr	r2, [pc, #608]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003804:	430b      	orrs	r3, r1
 8003806:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003808:	e003      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800380e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800381e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003822:	2300      	movs	r3, #0
 8003824:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003828:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800382c:	460b      	mov	r3, r1
 800382e:	4313      	orrs	r3, r2
 8003830:	d051      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800383c:	d035      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800383e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003842:	d82e      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003844:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003848:	d031      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x442>
 800384a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800384e:	d828      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003854:	d01a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385a:	d822      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003864:	d007      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003866:	e01c      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003868:	4b7e      	ldr	r3, [pc, #504]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	4a7d      	ldr	r2, [pc, #500]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800386e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003874:	e01c      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800387a:	3308      	adds	r3, #8
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f000 ff94 	bl	80047ac <RCCEx_PLL2_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800388a:	e011      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800388c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003890:	3328      	adds	r3, #40	; 0x28
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f001 f83b 	bl	8004910 <RCCEx_PLL3_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038a0:	e006      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80038a8:	e002      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80038aa:	bf00      	nop
 80038ac:	e000      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80038ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038b8:	4b6a      	ldr	r3, [pc, #424]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038bc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80038c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c6:	4a67      	ldr	r2, [pc, #412]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6513      	str	r3, [r2, #80]	; 0x50
 80038cc:	e003      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80038e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038e6:	2300      	movs	r3, #0
 80038e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038ec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80038f0:	460b      	mov	r3, r1
 80038f2:	4313      	orrs	r3, r2
 80038f4:	d053      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003900:	d033      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003902:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003906:	d82c      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003908:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800390c:	d02f      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800390e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003912:	d826      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003914:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003918:	d02b      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800391a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800391e:	d820      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003920:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003924:	d012      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800392a:	d81a      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d022      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003934:	d115      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800393a:	3308      	adds	r3, #8
 800393c:	2101      	movs	r1, #1
 800393e:	4618      	mov	r0, r3
 8003940:	f000 ff34 	bl	80047ac <RCCEx_PLL2_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800394a:	e015      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800394c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003950:	3328      	adds	r3, #40	; 0x28
 8003952:	2101      	movs	r1, #1
 8003954:	4618      	mov	r0, r3
 8003956:	f000 ffdb 	bl	8004910 <RCCEx_PLL3_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003960:	e00a      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003968:	e006      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800396a:	bf00      	nop
 800396c:	e004      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800396e:	bf00      	nop
 8003970:	e002      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003972:	bf00      	nop
 8003974:	e000      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003978:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10a      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003980:	4b38      	ldr	r3, [pc, #224]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003984:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800398c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398e:	4a35      	ldr	r2, [pc, #212]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003990:	430b      	orrs	r3, r1
 8003992:	6513      	str	r3, [r2, #80]	; 0x50
 8003994:	e003      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003996:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800399a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800399e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80039aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039ae:	2300      	movs	r3, #0
 80039b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80039b4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039b8:	460b      	mov	r3, r1
 80039ba:	4313      	orrs	r3, r2
 80039bc:	d058      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80039be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ca:	d033      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80039cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039d0:	d82c      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80039d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d6:	d02f      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039dc:	d826      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80039de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039e2:	d02b      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80039e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039e8:	d820      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80039ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ee:	d012      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80039f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f4:	d81a      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d022      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80039fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039fe:	d115      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a04:	3308      	adds	r3, #8
 8003a06:	2101      	movs	r1, #1
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fecf 	bl	80047ac <RCCEx_PLL2_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a14:	e015      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a1a:	3328      	adds	r3, #40	; 0x28
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 ff76 	bl	8004910 <RCCEx_PLL3_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a2a:	e00a      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a32:	e006      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a34:	bf00      	nop
 8003a36:	e004      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a38:	bf00      	nop
 8003a3a:	e002      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a3c:	bf00      	nop
 8003a3e:	e000      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10e      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a5a:	4a02      	ldr	r2, [pc, #8]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a60:	e006      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003a62:	bf00      	nop
 8003a64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	d037      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a9a:	d00e      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa0:	d816      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d018      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aaa:	d111      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aac:	4bc4      	ldr	r3, [pc, #784]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	4ac3      	ldr	r2, [pc, #780]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ab8:	e00f      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003abe:	3308      	adds	r3, #8
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fe72 	bl	80047ac <RCCEx_PLL2_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ace:	e004      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ad6:	e000      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ada:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ae2:	4bb7      	ldr	r3, [pc, #732]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af0:	4ab3      	ldr	r2, [pc, #716]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003af2:	430b      	orrs	r3, r1
 8003af4:	6513      	str	r3, [r2, #80]	; 0x50
 8003af6:	e003      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003afc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003b0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b10:	2300      	movs	r3, #0
 8003b12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	d039      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d81c      	bhi.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003b2a:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b30:	08003b6d 	.word	0x08003b6d
 8003b34:	08003b41 	.word	0x08003b41
 8003b38:	08003b4f 	.word	0x08003b4f
 8003b3c:	08003b6d 	.word	0x08003b6d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b40:	4b9f      	ldr	r3, [pc, #636]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	4a9e      	ldr	r2, [pc, #632]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b4c:	e00f      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b52:	3308      	adds	r3, #8
 8003b54:	2102      	movs	r1, #2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fe28 	bl	80047ac <RCCEx_PLL2_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b62:	e004      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003b6a:	e000      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10a      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b76:	4b92      	ldr	r3, [pc, #584]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7a:	f023 0103 	bic.w	r1, r3, #3
 8003b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b84:	4a8e      	ldr	r2, [pc, #568]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b86:	430b      	orrs	r3, r1
 8003b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b8a:	e003      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003ba0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003baa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f000 8099 	beq.w	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bb6:	4b83      	ldr	r3, [pc, #524]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a82      	ldr	r2, [pc, #520]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bc2:	f7fd fd79 	bl	80016b8 <HAL_GetTick>
 8003bc6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bca:	e00b      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bcc:	f7fd fd74 	bl	80016b8 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b64      	cmp	r3, #100	; 0x64
 8003bda:	d903      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003be2:	e005      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003be4:	4b77      	ldr	r3, [pc, #476]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0ed      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003bf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d173      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003bf8:	4b71      	ldr	r3, [pc, #452]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c04:	4053      	eors	r3, r2
 8003c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d015      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c0e:	4b6c      	ldr	r3, [pc, #432]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c1a:	4b69      	ldr	r3, [pc, #420]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	4a68      	ldr	r2, [pc, #416]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c24:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c26:	4b66      	ldr	r3, [pc, #408]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a65      	ldr	r2, [pc, #404]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c32:	4a63      	ldr	r2, [pc, #396]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c38:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c46:	d118      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fd fd36 	bl	80016b8 <HAL_GetTick>
 8003c4c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c50:	e00d      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7fd fd31 	bl	80016b8 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003c5c:	1ad2      	subs	r2, r2, r3
 8003c5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d903      	bls.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8003c6c:	e005      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c6e:	4b54      	ldr	r3, [pc, #336]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0eb      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d129      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c92:	d10e      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003c94:	4b4a      	ldr	r3, [pc, #296]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ca0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ca4:	091a      	lsrs	r2, r3, #4
 8003ca6:	4b48      	ldr	r3, [pc, #288]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	4a45      	ldr	r2, [pc, #276]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6113      	str	r3, [r2, #16]
 8003cb0:	e005      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003cb2:	4b43      	ldr	r3, [pc, #268]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	4a42      	ldr	r2, [pc, #264]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cbc:	6113      	str	r3, [r2, #16]
 8003cbe:	4b40      	ldr	r3, [pc, #256]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cc0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cce:	4a3c      	ldr	r2, [pc, #240]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cda:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003cde:	e003      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ce4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	f002 0301 	and.w	r3, r2, #1
 8003cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003cfe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003d02:	460b      	mov	r3, r1
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f000 808f 	beq.w	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d10:	2b28      	cmp	r3, #40	; 0x28
 8003d12:	d871      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003d14:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1a:	bf00      	nop
 8003d1c:	08003e01 	.word	0x08003e01
 8003d20:	08003df9 	.word	0x08003df9
 8003d24:	08003df9 	.word	0x08003df9
 8003d28:	08003df9 	.word	0x08003df9
 8003d2c:	08003df9 	.word	0x08003df9
 8003d30:	08003df9 	.word	0x08003df9
 8003d34:	08003df9 	.word	0x08003df9
 8003d38:	08003df9 	.word	0x08003df9
 8003d3c:	08003dcd 	.word	0x08003dcd
 8003d40:	08003df9 	.word	0x08003df9
 8003d44:	08003df9 	.word	0x08003df9
 8003d48:	08003df9 	.word	0x08003df9
 8003d4c:	08003df9 	.word	0x08003df9
 8003d50:	08003df9 	.word	0x08003df9
 8003d54:	08003df9 	.word	0x08003df9
 8003d58:	08003df9 	.word	0x08003df9
 8003d5c:	08003de3 	.word	0x08003de3
 8003d60:	08003df9 	.word	0x08003df9
 8003d64:	08003df9 	.word	0x08003df9
 8003d68:	08003df9 	.word	0x08003df9
 8003d6c:	08003df9 	.word	0x08003df9
 8003d70:	08003df9 	.word	0x08003df9
 8003d74:	08003df9 	.word	0x08003df9
 8003d78:	08003df9 	.word	0x08003df9
 8003d7c:	08003e01 	.word	0x08003e01
 8003d80:	08003df9 	.word	0x08003df9
 8003d84:	08003df9 	.word	0x08003df9
 8003d88:	08003df9 	.word	0x08003df9
 8003d8c:	08003df9 	.word	0x08003df9
 8003d90:	08003df9 	.word	0x08003df9
 8003d94:	08003df9 	.word	0x08003df9
 8003d98:	08003df9 	.word	0x08003df9
 8003d9c:	08003e01 	.word	0x08003e01
 8003da0:	08003df9 	.word	0x08003df9
 8003da4:	08003df9 	.word	0x08003df9
 8003da8:	08003df9 	.word	0x08003df9
 8003dac:	08003df9 	.word	0x08003df9
 8003db0:	08003df9 	.word	0x08003df9
 8003db4:	08003df9 	.word	0x08003df9
 8003db8:	08003df9 	.word	0x08003df9
 8003dbc:	08003e01 	.word	0x08003e01
 8003dc0:	58024400 	.word	0x58024400
 8003dc4:	58024800 	.word	0x58024800
 8003dc8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fce9 	bl	80047ac <RCCEx_PLL2_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003de0:	e00f      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003de6:	3328      	adds	r3, #40	; 0x28
 8003de8:	2101      	movs	r1, #1
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fd90 	bl	8004910 <RCCEx_PLL3_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003df6:	e004      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003dfe:	e000      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e0a:	4bbf      	ldr	r3, [pc, #764]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e18:	4abb      	ldr	r2, [pc, #748]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	6553      	str	r3, [r2, #84]	; 0x54
 8003e1e:	e003      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	f002 0302 	and.w	r3, r2, #2
 8003e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e3e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4313      	orrs	r3, r2
 8003e46:	d041      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4e:	2b05      	cmp	r3, #5
 8003e50:	d824      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003e52:	a201      	add	r2, pc, #4	; (adr r2, 8003e58 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e58:	08003ea5 	.word	0x08003ea5
 8003e5c:	08003e71 	.word	0x08003e71
 8003e60:	08003e87 	.word	0x08003e87
 8003e64:	08003ea5 	.word	0x08003ea5
 8003e68:	08003ea5 	.word	0x08003ea5
 8003e6c:	08003ea5 	.word	0x08003ea5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e74:	3308      	adds	r3, #8
 8003e76:	2101      	movs	r1, #1
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fc97 	bl	80047ac <RCCEx_PLL2_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e84:	e00f      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e8a:	3328      	adds	r3, #40	; 0x28
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fd3e 	bl	8004910 <RCCEx_PLL3_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e9a:	e004      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003eae:	4b96      	ldr	r3, [pc, #600]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	f023 0107 	bic.w	r1, r3, #7
 8003eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ebc:	4a92      	ldr	r2, [pc, #584]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	6553      	str	r3, [r2, #84]	; 0x54
 8003ec2:	e003      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ec8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	f002 0304 	and.w	r3, r2, #4
 8003ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ee2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	d044      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef4:	2b05      	cmp	r3, #5
 8003ef6:	d825      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003ef8:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f4d 	.word	0x08003f4d
 8003f04:	08003f19 	.word	0x08003f19
 8003f08:	08003f2f 	.word	0x08003f2f
 8003f0c:	08003f4d 	.word	0x08003f4d
 8003f10:	08003f4d 	.word	0x08003f4d
 8003f14:	08003f4d 	.word	0x08003f4d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	2101      	movs	r1, #1
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fc43 	bl	80047ac <RCCEx_PLL2_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f2c:	e00f      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f32:	3328      	adds	r3, #40	; 0x28
 8003f34:	2101      	movs	r1, #1
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fcea 	bl	8004910 <RCCEx_PLL3_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f42:	e004      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f4a:	e000      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10b      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f56:	4b6c      	ldr	r3, [pc, #432]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	f023 0107 	bic.w	r1, r3, #7
 8003f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f66:	4a68      	ldr	r2, [pc, #416]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f6c:	e003      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f72:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	f002 0320 	and.w	r3, r2, #32
 8003f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f86:	2300      	movs	r3, #0
 8003f88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003f8c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4313      	orrs	r3, r2
 8003f94:	d055      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fa2:	d033      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fa8:	d82c      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fae:	d02f      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb4:	d826      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003fb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fba:	d02b      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003fbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fc0:	d820      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003fc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fc6:	d012      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fcc:	d81a      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d022      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fd6:	d115      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fdc:	3308      	adds	r3, #8
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 fbe3 	bl	80047ac <RCCEx_PLL2_Config>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fec:	e015      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ff2:	3328      	adds	r3, #40	; 0x28
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fc8a 	bl	8004910 <RCCEx_PLL3_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004002:	e00a      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800400a:	e006      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800400c:	bf00      	nop
 800400e:	e004      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004010:	bf00      	nop
 8004012:	e002      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004014:	bf00      	nop
 8004016:	e000      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10b      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004022:	4b39      	ldr	r3, [pc, #228]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800402a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800402e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004032:	4a35      	ldr	r2, [pc, #212]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004034:	430b      	orrs	r3, r1
 8004036:	6553      	str	r3, [r2, #84]	; 0x54
 8004038:	e003      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800403e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800404e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004052:	2300      	movs	r3, #0
 8004054:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004058:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800405c:	460b      	mov	r3, r1
 800405e:	4313      	orrs	r3, r2
 8004060:	d058      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004066:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800406a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800406e:	d033      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004070:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004074:	d82c      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407a:	d02f      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800407c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004080:	d826      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004082:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004086:	d02b      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004088:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800408c:	d820      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800408e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004092:	d012      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004098:	d81a      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d022      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800409e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a2:	d115      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040a8:	3308      	adds	r3, #8
 80040aa:	2100      	movs	r1, #0
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fb7d 	bl	80047ac <RCCEx_PLL2_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040b8:	e015      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040be:	3328      	adds	r3, #40	; 0x28
 80040c0:	2102      	movs	r1, #2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fc24 	bl	8004910 <RCCEx_PLL3_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040ce:	e00a      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80040d6:	e006      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80040d8:	bf00      	nop
 80040da:	e004      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80040dc:	bf00      	nop
 80040de:	e002      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80040e0:	bf00      	nop
 80040e2:	e000      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80040e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10e      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80040f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040fe:	4a02      	ldr	r2, [pc, #8]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004100:	430b      	orrs	r3, r1
 8004102:	6593      	str	r3, [r2, #88]	; 0x58
 8004104:	e006      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004106:	bf00      	nop
 8004108:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004110:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004120:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004124:	2300      	movs	r3, #0
 8004126:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800412a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800412e:	460b      	mov	r3, r1
 8004130:	4313      	orrs	r3, r2
 8004132:	d055      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004138:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800413c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004140:	d033      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004142:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004146:	d82c      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414c:	d02f      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800414e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004152:	d826      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004154:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004158:	d02b      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800415a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800415e:	d820      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004164:	d012      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800416a:	d81a      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d022      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004174:	d115      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800417a:	3308      	adds	r3, #8
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fb14 	bl	80047ac <RCCEx_PLL2_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800418a:	e015      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800418c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004190:	3328      	adds	r3, #40	; 0x28
 8004192:	2102      	movs	r1, #2
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fbbb 	bl	8004910 <RCCEx_PLL3_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041a0:	e00a      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80041a8:	e006      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80041aa:	bf00      	nop
 80041ac:	e004      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80041ae:	bf00      	nop
 80041b0:	e002      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80041b2:	bf00      	nop
 80041b4:	e000      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80041b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041c0:	4ba0      	ldr	r3, [pc, #640]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80041c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d0:	4a9c      	ldr	r2, [pc, #624]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041d2:	430b      	orrs	r3, r1
 80041d4:	6593      	str	r3, [r2, #88]	; 0x58
 80041d6:	e003      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80041e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	f002 0308 	and.w	r3, r2, #8
 80041ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041f0:	2300      	movs	r3, #0
 80041f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80041f6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80041fa:	460b      	mov	r3, r1
 80041fc:	4313      	orrs	r3, r2
 80041fe:	d01e      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420c:	d10c      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800420e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004212:	3328      	adds	r3, #40	; 0x28
 8004214:	2102      	movs	r1, #2
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fb7a 	bl	8004910 <RCCEx_PLL3_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004228:	4b86      	ldr	r3, [pc, #536]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004238:	4a82      	ldr	r2, [pc, #520]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800423a:	430b      	orrs	r3, r1
 800423c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800423e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f002 0310 	and.w	r3, r2, #16
 800424a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800424e:	2300      	movs	r3, #0
 8004250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004254:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004258:	460b      	mov	r3, r1
 800425a:	4313      	orrs	r3, r2
 800425c:	d01e      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800425e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800426a:	d10c      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800426c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004270:	3328      	adds	r3, #40	; 0x28
 8004272:	2102      	movs	r1, #2
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fb4b 	bl	8004910 <RCCEx_PLL3_Config>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004286:	4b6f      	ldr	r3, [pc, #444]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800428e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004296:	4a6b      	ldr	r2, [pc, #428]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004298:	430b      	orrs	r3, r1
 800429a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800429c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80042a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80042aa:	2300      	movs	r3, #0
 80042ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042ae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80042b2:	460b      	mov	r3, r1
 80042b4:	4313      	orrs	r3, r2
 80042b6:	d03e      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80042b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042c4:	d022      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80042c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042ca:	d81b      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d4:	d00b      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80042d6:	e015      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042dc:	3308      	adds	r3, #8
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fa63 	bl	80047ac <RCCEx_PLL2_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042ec:	e00f      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042f2:	3328      	adds	r3, #40	; 0x28
 80042f4:	2102      	movs	r1, #2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fb0a 	bl	8004910 <RCCEx_PLL3_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004302:	e004      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800430a:	e000      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800430c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10b      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004316:	4b4b      	ldr	r3, [pc, #300]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800431e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004322:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004326:	4a47      	ldr	r2, [pc, #284]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004328:	430b      	orrs	r3, r1
 800432a:	6593      	str	r3, [r2, #88]	; 0x58
 800432c:	e003      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004332:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004342:	673b      	str	r3, [r7, #112]	; 0x70
 8004344:	2300      	movs	r3, #0
 8004346:	677b      	str	r3, [r7, #116]	; 0x74
 8004348:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800434c:	460b      	mov	r3, r1
 800434e:	4313      	orrs	r3, r2
 8004350:	d03b      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800435a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800435e:	d01f      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004360:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004364:	d818      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800436a:	d003      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800436c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004370:	d007      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004372:	e011      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004374:	4b33      	ldr	r3, [pc, #204]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	4a32      	ldr	r2, [pc, #200]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800437a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800437e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004380:	e00f      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004386:	3328      	adds	r3, #40	; 0x28
 8004388:	2101      	movs	r1, #1
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fac0 	bl	8004910 <RCCEx_PLL3_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004396:	e004      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800439e:	e000      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80043a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10b      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043aa:	4b26      	ldr	r3, [pc, #152]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80043b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ba:	4a22      	ldr	r2, [pc, #136]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043bc:	430b      	orrs	r3, r1
 80043be:	6553      	str	r3, [r2, #84]	; 0x54
 80043c0:	e003      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80043d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80043d8:	2300      	movs	r3, #0
 80043da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043dc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80043e0:	460b      	mov	r3, r1
 80043e2:	4313      	orrs	r3, r2
 80043e4:	d034      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80043f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f4:	d007      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80043f6:	e011      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f8:	4b12      	ldr	r3, [pc, #72]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	4a11      	ldr	r2, [pc, #68]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004404:	e00e      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800440a:	3308      	adds	r3, #8
 800440c:	2102      	movs	r1, #2
 800440e:	4618      	mov	r0, r3
 8004410:	f000 f9cc 	bl	80047ac <RCCEx_PLL2_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800441a:	e003      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004422:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004424:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10d      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800442c:	4b05      	ldr	r3, [pc, #20]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800442e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004430:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443a:	4a02      	ldr	r2, [pc, #8]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800443c:	430b      	orrs	r3, r1
 800443e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004440:	e006      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004442:	bf00      	nop
 8004444:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004448:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800444c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800445c:	663b      	str	r3, [r7, #96]	; 0x60
 800445e:	2300      	movs	r3, #0
 8004460:	667b      	str	r3, [r7, #100]	; 0x64
 8004462:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004466:	460b      	mov	r3, r1
 8004468:	4313      	orrs	r3, r2
 800446a:	d00c      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800446c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004470:	3328      	adds	r3, #40	; 0x28
 8004472:	2102      	movs	r1, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fa4b 	bl	8004910 <RCCEx_PLL3_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004492:	65bb      	str	r3, [r7, #88]	; 0x58
 8004494:	2300      	movs	r3, #0
 8004496:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004498:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800449c:	460b      	mov	r3, r1
 800449e:	4313      	orrs	r3, r2
 80044a0:	d036      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80044a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ac:	d018      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80044ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b2:	d811      	bhi.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80044b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b8:	d014      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80044ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044be:	d80b      	bhi.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d011      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80044c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c8:	d106      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ca:	4bb7      	ldr	r3, [pc, #732]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	4ab6      	ldr	r2, [pc, #728]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80044d6:	e008      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80044de:	e004      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80044e0:	bf00      	nop
 80044e2:	e002      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80044e4:	bf00      	nop
 80044e6:	e000      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80044e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044f2:	4bad      	ldr	r3, [pc, #692]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004500:	4aa9      	ldr	r2, [pc, #676]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004502:	430b      	orrs	r3, r1
 8004504:	6553      	str	r3, [r2, #84]	; 0x54
 8004506:	e003      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004508:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800450c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800451c:	653b      	str	r3, [r7, #80]	; 0x50
 800451e:	2300      	movs	r3, #0
 8004520:	657b      	str	r3, [r7, #84]	; 0x54
 8004522:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	d009      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800452c:	4b9e      	ldr	r3, [pc, #632]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800452e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004530:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	4a9b      	ldr	r2, [pc, #620]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800453c:	430b      	orrs	r3, r1
 800453e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800454c:	64bb      	str	r3, [r7, #72]	; 0x48
 800454e:	2300      	movs	r3, #0
 8004550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004552:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004556:	460b      	mov	r3, r1
 8004558:	4313      	orrs	r3, r2
 800455a:	d009      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800455c:	4b92      	ldr	r3, [pc, #584]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800455e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004560:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800456a:	4a8f      	ldr	r2, [pc, #572]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800456c:	430b      	orrs	r3, r1
 800456e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800457c:	643b      	str	r3, [r7, #64]	; 0x40
 800457e:	2300      	movs	r3, #0
 8004580:	647b      	str	r3, [r7, #68]	; 0x44
 8004582:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004586:	460b      	mov	r3, r1
 8004588:	4313      	orrs	r3, r2
 800458a:	d00e      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800458c:	4b86      	ldr	r3, [pc, #536]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	4a85      	ldr	r2, [pc, #532]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004592:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004596:	6113      	str	r3, [r2, #16]
 8004598:	4b83      	ldr	r3, [pc, #524]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800459a:	6919      	ldr	r1, [r3, #16]
 800459c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045a4:	4a80      	ldr	r2, [pc, #512]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045a6:	430b      	orrs	r3, r1
 80045a8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80045b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80045b8:	2300      	movs	r3, #0
 80045ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045bc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80045c0:	460b      	mov	r3, r1
 80045c2:	4313      	orrs	r3, r2
 80045c4:	d009      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045c6:	4b78      	ldr	r3, [pc, #480]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80045ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d4:	4a74      	ldr	r2, [pc, #464]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045d6:	430b      	orrs	r3, r1
 80045d8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80045e6:	633b      	str	r3, [r7, #48]	; 0x30
 80045e8:	2300      	movs	r3, #0
 80045ea:	637b      	str	r3, [r7, #52]	; 0x34
 80045ec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80045f0:	460b      	mov	r3, r1
 80045f2:	4313      	orrs	r3, r2
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045f6:	4b6c      	ldr	r3, [pc, #432]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80045fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	4a68      	ldr	r2, [pc, #416]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004608:	430b      	orrs	r3, r1
 800460a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800460c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	2100      	movs	r1, #0
 8004616:	62b9      	str	r1, [r7, #40]	; 0x28
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800461e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004622:	460b      	mov	r3, r1
 8004624:	4313      	orrs	r3, r2
 8004626:	d011      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800462c:	3308      	adds	r3, #8
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f000 f8bb 	bl	80047ac <RCCEx_PLL2_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800463c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004644:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004648:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800464c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	2100      	movs	r1, #0
 8004656:	6239      	str	r1, [r7, #32]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
 800465e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004662:	460b      	mov	r3, r1
 8004664:	4313      	orrs	r3, r2
 8004666:	d011      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800466c:	3308      	adds	r3, #8
 800466e:	2101      	movs	r1, #1
 8004670:	4618      	mov	r0, r3
 8004672:	f000 f89b 	bl	80047ac <RCCEx_PLL2_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800467c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004684:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004688:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800468c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	2100      	movs	r1, #0
 8004696:	61b9      	str	r1, [r7, #24]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046a2:	460b      	mov	r3, r1
 80046a4:	4313      	orrs	r3, r2
 80046a6:	d011      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ac:	3308      	adds	r3, #8
 80046ae:	2102      	movs	r1, #2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 f87b 	bl	80047ac <RCCEx_PLL2_Config>
 80046b6:	4603      	mov	r3, r0
 80046b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80046bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80046cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	2100      	movs	r1, #0
 80046d6:	6139      	str	r1, [r7, #16]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046e2:	460b      	mov	r3, r1
 80046e4:	4313      	orrs	r3, r2
 80046e6:	d011      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ec:	3328      	adds	r3, #40	; 0x28
 80046ee:	2100      	movs	r1, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 f90d 	bl	8004910 <RCCEx_PLL3_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80046fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004704:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004708:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800470c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	2100      	movs	r1, #0
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004722:	460b      	mov	r3, r1
 8004724:	4313      	orrs	r3, r2
 8004726:	d011      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800472c:	3328      	adds	r3, #40	; 0x28
 800472e:	2101      	movs	r1, #1
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f8ed 	bl	8004910 <RCCEx_PLL3_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800473c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004744:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004748:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800474c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004754:	2100      	movs	r1, #0
 8004756:	6039      	str	r1, [r7, #0]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	607b      	str	r3, [r7, #4]
 800475e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004762:	460b      	mov	r3, r1
 8004764:	4313      	orrs	r3, r2
 8004766:	d011      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800476c:	3328      	adds	r3, #40	; 0x28
 800476e:	2102      	movs	r1, #2
 8004770:	4618      	mov	r0, r3
 8004772:	f000 f8cd 	bl	8004910 <RCCEx_PLL3_Config>
 8004776:	4603      	mov	r3, r0
 8004778:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800477c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004784:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004788:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800478c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	e000      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
}
 800479a:	4618      	mov	r0, r3
 800479c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80047a0:	46bd      	mov	sp, r7
 80047a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a6:	bf00      	nop
 80047a8:	58024400 	.word	0x58024400

080047ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047ba:	4b53      	ldr	r3, [pc, #332]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d101      	bne.n	80047ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e099      	b.n	80048fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80047ca:	4b4f      	ldr	r3, [pc, #316]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a4e      	ldr	r2, [pc, #312]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 80047d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d6:	f7fc ff6f 	bl	80016b8 <HAL_GetTick>
 80047da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047dc:	e008      	b.n	80047f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047de:	f7fc ff6b 	bl	80016b8 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e086      	b.n	80048fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047f0:	4b45      	ldr	r3, [pc, #276]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f0      	bne.n	80047de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80047fc:	4b42      	ldr	r3, [pc, #264]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	031b      	lsls	r3, r3, #12
 800480a:	493f      	ldr	r1, [pc, #252]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 800480c:	4313      	orrs	r3, r2
 800480e:	628b      	str	r3, [r1, #40]	; 0x28
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	3b01      	subs	r3, #1
 8004816:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	3b01      	subs	r3, #1
 8004820:	025b      	lsls	r3, r3, #9
 8004822:	b29b      	uxth	r3, r3
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	3b01      	subs	r3, #1
 800482c:	041b      	lsls	r3, r3, #16
 800482e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	3b01      	subs	r3, #1
 800483a:	061b      	lsls	r3, r3, #24
 800483c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004840:	4931      	ldr	r1, [pc, #196]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 8004842:	4313      	orrs	r3, r2
 8004844:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004846:	4b30      	ldr	r3, [pc, #192]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	492d      	ldr	r1, [pc, #180]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 8004854:	4313      	orrs	r3, r2
 8004856:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004858:	4b2b      	ldr	r3, [pc, #172]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	f023 0220 	bic.w	r2, r3, #32
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	4928      	ldr	r1, [pc, #160]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 8004866:	4313      	orrs	r3, r2
 8004868:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800486a:	4b27      	ldr	r3, [pc, #156]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	4a26      	ldr	r2, [pc, #152]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 8004870:	f023 0310 	bic.w	r3, r3, #16
 8004874:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004876:	4b24      	ldr	r3, [pc, #144]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 8004878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800487a:	4b24      	ldr	r3, [pc, #144]	; (800490c <RCCEx_PLL2_Config+0x160>)
 800487c:	4013      	ands	r3, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	69d2      	ldr	r2, [r2, #28]
 8004882:	00d2      	lsls	r2, r2, #3
 8004884:	4920      	ldr	r1, [pc, #128]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 8004886:	4313      	orrs	r3, r2
 8004888:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800488a:	4b1f      	ldr	r3, [pc, #124]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	4a1e      	ldr	r2, [pc, #120]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 8004890:	f043 0310 	orr.w	r3, r3, #16
 8004894:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800489c:	4b1a      	ldr	r3, [pc, #104]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	4a19      	ldr	r2, [pc, #100]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 80048a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048a8:	e00f      	b.n	80048ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d106      	bne.n	80048be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80048b0:	4b15      	ldr	r3, [pc, #84]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	4a14      	ldr	r2, [pc, #80]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 80048b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048bc:	e005      	b.n	80048ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80048be:	4b12      	ldr	r3, [pc, #72]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	4a11      	ldr	r2, [pc, #68]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 80048c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80048ca:	4b0f      	ldr	r3, [pc, #60]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a0e      	ldr	r2, [pc, #56]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 80048d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d6:	f7fc feef 	bl	80016b8 <HAL_GetTick>
 80048da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048dc:	e008      	b.n	80048f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048de:	f7fc feeb 	bl	80016b8 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e006      	b.n	80048fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <RCCEx_PLL2_Config+0x15c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	58024400 	.word	0x58024400
 800490c:	ffff0007 	.word	0xffff0007

08004910 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800491e:	4b53      	ldr	r3, [pc, #332]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	2b03      	cmp	r3, #3
 8004928:	d101      	bne.n	800492e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e099      	b.n	8004a62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800492e:	4b4f      	ldr	r3, [pc, #316]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a4e      	ldr	r2, [pc, #312]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 8004934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800493a:	f7fc febd 	bl	80016b8 <HAL_GetTick>
 800493e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004940:	e008      	b.n	8004954 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004942:	f7fc feb9 	bl	80016b8 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e086      	b.n	8004a62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004954:	4b45      	ldr	r3, [pc, #276]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f0      	bne.n	8004942 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004960:	4b42      	ldr	r3, [pc, #264]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	051b      	lsls	r3, r3, #20
 800496e:	493f      	ldr	r1, [pc, #252]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 8004970:	4313      	orrs	r3, r2
 8004972:	628b      	str	r3, [r1, #40]	; 0x28
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	3b01      	subs	r3, #1
 800497a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	3b01      	subs	r3, #1
 8004984:	025b      	lsls	r3, r3, #9
 8004986:	b29b      	uxth	r3, r3
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	3b01      	subs	r3, #1
 8004990:	041b      	lsls	r3, r3, #16
 8004992:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	3b01      	subs	r3, #1
 800499e:	061b      	lsls	r3, r3, #24
 80049a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049a4:	4931      	ldr	r1, [pc, #196]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80049aa:	4b30      	ldr	r3, [pc, #192]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	492d      	ldr	r1, [pc, #180]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80049bc:	4b2b      	ldr	r3, [pc, #172]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	4928      	ldr	r1, [pc, #160]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80049ce:	4b27      	ldr	r3, [pc, #156]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	4a26      	ldr	r2, [pc, #152]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 80049d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80049da:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 80049dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049de:	4b24      	ldr	r3, [pc, #144]	; (8004a70 <RCCEx_PLL3_Config+0x160>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	69d2      	ldr	r2, [r2, #28]
 80049e6:	00d2      	lsls	r2, r2, #3
 80049e8:	4920      	ldr	r1, [pc, #128]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80049ee:	4b1f      	ldr	r3, [pc, #124]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	4a1e      	ldr	r2, [pc, #120]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 80049f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a00:	4b1a      	ldr	r3, [pc, #104]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	4a19      	ldr	r2, [pc, #100]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 8004a06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a0c:	e00f      	b.n	8004a2e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d106      	bne.n	8004a22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a14:	4b15      	ldr	r3, [pc, #84]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	4a14      	ldr	r2, [pc, #80]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 8004a1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a20:	e005      	b.n	8004a2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a22:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	4a11      	ldr	r2, [pc, #68]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 8004a28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004a2e:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a0e      	ldr	r2, [pc, #56]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 8004a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3a:	f7fc fe3d 	bl	80016b8 <HAL_GetTick>
 8004a3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a40:	e008      	b.n	8004a54 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a42:	f7fc fe39 	bl	80016b8 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e006      	b.n	8004a62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <RCCEx_PLL3_Config+0x15c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f0      	beq.n	8004a42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	58024400 	.word	0x58024400
 8004a70:	ffff0007 	.word	0xffff0007

08004a74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e10f      	b.n	8004ca6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a87      	ldr	r2, [pc, #540]	; (8004cb0 <HAL_SPI_Init+0x23c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00f      	beq.n	8004ab6 <HAL_SPI_Init+0x42>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a86      	ldr	r2, [pc, #536]	; (8004cb4 <HAL_SPI_Init+0x240>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_SPI_Init+0x42>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a84      	ldr	r2, [pc, #528]	; (8004cb8 <HAL_SPI_Init+0x244>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d005      	beq.n	8004ab6 <HAL_SPI_Init+0x42>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	2b0f      	cmp	r3, #15
 8004ab0:	d901      	bls.n	8004ab6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e0f7      	b.n	8004ca6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 ff74 	bl	80059a4 <SPI_GetPacketSize>
 8004abc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a7b      	ldr	r2, [pc, #492]	; (8004cb0 <HAL_SPI_Init+0x23c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00c      	beq.n	8004ae2 <HAL_SPI_Init+0x6e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a79      	ldr	r2, [pc, #484]	; (8004cb4 <HAL_SPI_Init+0x240>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d007      	beq.n	8004ae2 <HAL_SPI_Init+0x6e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a78      	ldr	r2, [pc, #480]	; (8004cb8 <HAL_SPI_Init+0x244>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d002      	beq.n	8004ae2 <HAL_SPI_Init+0x6e>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d811      	bhi.n	8004b06 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004ae6:	4a72      	ldr	r2, [pc, #456]	; (8004cb0 <HAL_SPI_Init+0x23c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d009      	beq.n	8004b00 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a70      	ldr	r2, [pc, #448]	; (8004cb4 <HAL_SPI_Init+0x240>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d004      	beq.n	8004b00 <HAL_SPI_Init+0x8c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a6f      	ldr	r2, [pc, #444]	; (8004cb8 <HAL_SPI_Init+0x244>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d104      	bne.n	8004b0a <HAL_SPI_Init+0x96>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b10      	cmp	r3, #16
 8004b04:	d901      	bls.n	8004b0a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e0cd      	b.n	8004ca6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fc f9ee 	bl	8000f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0201 	bic.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004b46:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b50:	d119      	bne.n	8004b86 <HAL_SPI_Init+0x112>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b5a:	d103      	bne.n	8004b64 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10c      	bne.n	8004b86 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b74:	d107      	bne.n	8004b86 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00f      	beq.n	8004bb2 <HAL_SPI_Init+0x13e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2b06      	cmp	r3, #6
 8004b98:	d90b      	bls.n	8004bb2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	e007      	b.n	8004bc2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bc0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69da      	ldr	r2, [r3, #28]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd4:	ea42 0103 	orr.w	r1, r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c22:	ea42 0103 	orr.w	r1, r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d113      	bne.n	8004c62 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c60:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40013000 	.word	0x40013000
 8004cb4:	40003800 	.word	0x40003800
 8004cb8:	40003c00 	.word	0x40003c00

08004cbc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	; 0x28
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3320      	adds	r3, #32
 8004cd2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_SPI_Transmit+0x2a>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e1e1      	b.n	80050aa <HAL_SPI_Transmit+0x3ee>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cee:	f7fc fce3 	bl	80016b8 <HAL_GetTick>
 8004cf2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d007      	beq.n	8004d10 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004d00:	2302      	movs	r3, #2
 8004d02:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004d0c:	7efb      	ldrb	r3, [r7, #27]
 8004d0e:	e1cc      	b.n	80050aa <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_SPI_Transmit+0x60>
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d107      	bne.n	8004d2c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004d28:	7efb      	ldrb	r3, [r7, #27]
 8004d2a:	e1be      	b.n	80050aa <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2203      	movs	r2, #3
 8004d30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	88fa      	ldrh	r2, [r7, #6]
 8004d46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	88fa      	ldrh	r2, [r7, #6]
 8004d4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004d7c:	d108      	bne.n	8004d90 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e009      	b.n	8004da4 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004da2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	4b96      	ldr	r3, [pc, #600]	; (8005004 <HAL_SPI_Transmit+0x348>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	88f9      	ldrh	r1, [r7, #6]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dd0:	d107      	bne.n	8004de2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2b0f      	cmp	r3, #15
 8004de8:	d947      	bls.n	8004e7a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004dea:	e03f      	b.n	8004e6c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d114      	bne.n	8004e24 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0a:	1d1a      	adds	r2, r3, #4
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004e22:	e023      	b.n	8004e6c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e24:	f7fc fc48 	bl	80016b8 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d803      	bhi.n	8004e3c <HAL_SPI_Transmit+0x180>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d102      	bne.n	8004e42 <HAL_SPI_Transmit+0x186>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d114      	bne.n	8004e6c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 fce0 	bl	8005808 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e11e      	b.n	80050aa <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1b9      	bne.n	8004dec <HAL_SPI_Transmit+0x130>
 8004e78:	e0f1      	b.n	800505e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	2b07      	cmp	r3, #7
 8004e80:	f240 80e6 	bls.w	8005050 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004e84:	e05d      	b.n	8004f42 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d132      	bne.n	8004efa <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d918      	bls.n	8004ed2 <HAL_SPI_Transmit+0x216>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d014      	beq.n	8004ed2 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb8:	1d1a      	adds	r2, r3, #4
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b02      	subs	r3, #2
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004ed0:	e037      	b.n	8004f42 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed6:	881a      	ldrh	r2, [r3, #0]
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee0:	1c9a      	adds	r2, r3, #2
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004ef8:	e023      	b.n	8004f42 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004efa:	f7fc fbdd 	bl	80016b8 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d803      	bhi.n	8004f12 <HAL_SPI_Transmit+0x256>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d102      	bne.n	8004f18 <HAL_SPI_Transmit+0x25c>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d114      	bne.n	8004f42 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 fc75 	bl	8005808 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e0b3      	b.n	80050aa <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d19b      	bne.n	8004e86 <HAL_SPI_Transmit+0x1ca>
 8004f4e:	e086      	b.n	800505e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d154      	bne.n	8005008 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d918      	bls.n	8004f9c <HAL_SPI_Transmit+0x2e0>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6e:	2b40      	cmp	r3, #64	; 0x40
 8004f70:	d914      	bls.n	8004f9c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f82:	1d1a      	adds	r2, r3, #4
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b04      	subs	r3, #4
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004f9a:	e059      	b.n	8005050 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d917      	bls.n	8004fd8 <HAL_SPI_Transmit+0x31c>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d013      	beq.n	8004fd8 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb4:	881a      	ldrh	r2, [r3, #0]
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fbe:	1c9a      	adds	r2, r3, #2
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b02      	subs	r3, #2
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004fd6:	e03b      	b.n	8005050 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3320      	adds	r3, #32
 8004fe2:	7812      	ldrb	r2, [r2, #0]
 8004fe4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005002:	e025      	b.n	8005050 <HAL_SPI_Transmit+0x394>
 8005004:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005008:	f7fc fb56 	bl	80016b8 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d803      	bhi.n	8005020 <HAL_SPI_Transmit+0x364>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501e:	d102      	bne.n	8005026 <HAL_SPI_Transmit+0x36a>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d114      	bne.n	8005050 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 fbee 	bl	8005808 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800503a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e02c      	b.n	80050aa <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	f47f af79 	bne.w	8004f50 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2200      	movs	r2, #0
 8005066:	2108      	movs	r1, #8
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 fc6d 	bl	8005948 <SPI_WaitOnFlagUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800507a:	f043 0220 	orr.w	r2, r3, #32
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fbbf 	bl	8005808 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e000      	b.n	80050aa <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 80050a8:	7efb      	ldrb	r3, [r7, #27]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3720      	adds	r7, #32
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop

080050b4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	4613      	mov	r3, r2
 80050c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3330      	adds	r3, #48	; 0x30
 80050ce:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_SPI_Receive+0x2a>
 80050da:	2302      	movs	r3, #2
 80050dc:	e173      	b.n	80053c6 <HAL_SPI_Receive+0x312>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050e6:	f7fc fae7 	bl	80016b8 <HAL_GetTick>
 80050ea:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d007      	beq.n	8005108 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 80050f8:	2302      	movs	r3, #2
 80050fa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005104:	7ffb      	ldrb	r3, [r7, #31]
 8005106:	e15e      	b.n	80053c6 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_SPI_Receive+0x60>
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d107      	bne.n	8005124 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005120:	7ffb      	ldrb	r3, [r7, #31]
 8005122:	e150      	b.n	80053c6 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2204      	movs	r2, #4
 8005128:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	88fa      	ldrh	r2, [r7, #6]
 800513e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	88fa      	ldrh	r2, [r7, #6]
 8005146:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005174:	d108      	bne.n	8005188 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	e009      	b.n	800519c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800519a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	4b8b      	ldr	r3, [pc, #556]	; (80053d0 <HAL_SPI_Receive+0x31c>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	88f9      	ldrh	r1, [r7, #6]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	6812      	ldr	r2, [r2, #0]
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051c8:	d107      	bne.n	80051da <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	2b0f      	cmp	r3, #15
 80051e0:	d948      	bls.n	8005274 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80051e2:	e040      	b.n	8005266 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695a      	ldr	r2, [r3, #20]
 80051ea:	f248 0308 	movw	r3, #32776	; 0x8008
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d014      	beq.n	800521e <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051fe:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005204:	1d1a      	adds	r2, r3, #4
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800521c:	e023      	b.n	8005266 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800521e:	f7fc fa4b 	bl	80016b8 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d803      	bhi.n	8005236 <HAL_SPI_Receive+0x182>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d102      	bne.n	800523c <HAL_SPI_Receive+0x188>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d114      	bne.n	8005266 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fae3 	bl	8005808 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005250:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e0af      	b.n	80053c6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1b8      	bne.n	80051e4 <HAL_SPI_Receive+0x130>
 8005272:	e095      	b.n	80053a0 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	2b07      	cmp	r3, #7
 800527a:	f240 808b 	bls.w	8005394 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800527e:	e03f      	b.n	8005300 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b01      	cmp	r3, #1
 800528c:	d114      	bne.n	80052b8 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	8812      	ldrh	r2, [r2, #0]
 8005296:	b292      	uxth	r2, r2
 8005298:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800529e:	1c9a      	adds	r2, r3, #2
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80052b6:	e023      	b.n	8005300 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052b8:	f7fc f9fe 	bl	80016b8 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d803      	bhi.n	80052d0 <HAL_SPI_Receive+0x21c>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ce:	d102      	bne.n	80052d6 <HAL_SPI_Receive+0x222>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d114      	bne.n	8005300 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 fa96 	bl	8005808 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e062      	b.n	80053c6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1b9      	bne.n	8005280 <HAL_SPI_Receive+0x1cc>
 800530c:	e048      	b.n	80053a0 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b01      	cmp	r3, #1
 800531a:	d117      	bne.n	800534c <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005328:	7812      	ldrb	r2, [r2, #0]
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800534a:	e023      	b.n	8005394 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800534c:	f7fc f9b4 	bl	80016b8 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d803      	bhi.n	8005364 <HAL_SPI_Receive+0x2b0>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005362:	d102      	bne.n	800536a <HAL_SPI_Receive+0x2b6>
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d114      	bne.n	8005394 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 fa4c 	bl	8005808 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800537e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e018      	b.n	80053c6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1b6      	bne.n	800530e <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 fa31 	bl	8005808 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 80053c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3720      	adds	r7, #32
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	ffff0000 	.word	0xffff0000

080053d4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	; 0x28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80053ec:	6a3a      	ldr	r2, [r7, #32]
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	4013      	ands	r3, r2
 80053f2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80053fc:	2300      	movs	r3, #0
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005406:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3330      	adds	r3, #48	; 0x30
 800540e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005416:	2b00      	cmp	r3, #0
 8005418:	d010      	beq.n	800543c <HAL_SPI_IRQHandler+0x68>
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	f003 0308 	and.w	r3, r3, #8
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00b      	beq.n	800543c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005432:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f9c3 	bl	80057c0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800543a:	e192      	b.n	8005762 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d113      	bne.n	800546e <HAL_SPI_IRQHandler+0x9a>
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	f003 0320 	and.w	r3, r3, #32
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10e      	bne.n	800546e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005456:	2b00      	cmp	r3, #0
 8005458:	d009      	beq.n	800546e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	4798      	blx	r3
    handled = 1UL;
 800546a:	2301      	movs	r3, #1
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10f      	bne.n	8005498 <HAL_SPI_IRQHandler+0xc4>
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005488:	2b00      	cmp	r3, #0
 800548a:	d105      	bne.n	8005498 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	4798      	blx	r3
    handled = 1UL;
 8005494:	2301      	movs	r3, #1
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10f      	bne.n	80054c2 <HAL_SPI_IRQHandler+0xee>
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d105      	bne.n	80054c2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	4798      	blx	r3
    handled = 1UL;
 80054be:	2301      	movs	r3, #1
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 8147 	bne.w	8005758 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 808b 	beq.w	80055ec <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699a      	ldr	r2, [r3, #24]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0208 	orr.w	r2, r2, #8
 80054e4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699a      	ldr	r2, [r3, #24]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f042 0210 	orr.w	r2, r2, #16
 80054f4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699a      	ldr	r2, [r3, #24]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005504:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0208 	bic.w	r2, r2, #8
 8005514:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d13d      	bne.n	80055a0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8005524:	e036      	b.n	8005594 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	2b0f      	cmp	r3, #15
 800552c:	d90b      	bls.n	8005546 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005536:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005538:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800553e:	1d1a      	adds	r2, r3, #4
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	665a      	str	r2, [r3, #100]	; 0x64
 8005544:	e01d      	b.n	8005582 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	2b07      	cmp	r3, #7
 800554c:	d90b      	bls.n	8005566 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	8812      	ldrh	r2, [r2, #0]
 8005556:	b292      	uxth	r2, r2
 8005558:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800555e:	1c9a      	adds	r2, r3, #2
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	665a      	str	r2, [r3, #100]	; 0x64
 8005564:	e00d      	b.n	8005582 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005572:	7812      	ldrb	r2, [r2, #0]
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1c2      	bne.n	8005526 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f931 	bl	8005808 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f8f7 	bl	80057ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80055be:	e0d0      	b.n	8005762 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80055c0:	7cfb      	ldrb	r3, [r7, #19]
 80055c2:	2b05      	cmp	r3, #5
 80055c4:	d103      	bne.n	80055ce <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f8e6 	bl	8005798 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80055cc:	e0c6      	b.n	800575c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80055ce:	7cfb      	ldrb	r3, [r7, #19]
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d103      	bne.n	80055dc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f8d5 	bl	8005784 <HAL_SPI_RxCpltCallback>
    return;
 80055da:	e0bf      	b.n	800575c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80055dc:	7cfb      	ldrb	r3, [r7, #19]
 80055de:	2b03      	cmp	r3, #3
 80055e0:	f040 80bc 	bne.w	800575c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f8c3 	bl	8005770 <HAL_SPI_TxCpltCallback>
    return;
 80055ea:	e0b7      	b.n	800575c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 80b5 	beq.w	8005762 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00f      	beq.n	8005622 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005608:	f043 0204 	orr.w	r2, r3, #4
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699a      	ldr	r2, [r3, #24]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005620:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00f      	beq.n	800564c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005632:	f043 0201 	orr.w	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800564a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00f      	beq.n	8005676 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800565c:	f043 0208 	orr.w	r2, r3, #8
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	699a      	ldr	r2, [r3, #24]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005674:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00f      	beq.n	80056a0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005686:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0220 	orr.w	r2, r2, #32
 800569e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d05a      	beq.n	8005760 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0201 	bic.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6919      	ldr	r1, [r3, #16]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	4b28      	ldr	r3, [pc, #160]	; (8005768 <HAL_SPI_IRQHandler+0x394>)
 80056c6:	400b      	ands	r3, r1
 80056c8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056d4:	d138      	bne.n	8005748 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80056e4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d013      	beq.n	8005716 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056f2:	4a1e      	ldr	r2, [pc, #120]	; (800576c <HAL_SPI_IRQHandler+0x398>)
 80056f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fc f968 	bl	80019d0 <HAL_DMA_Abort_IT>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d007      	beq.n	8005716 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800570c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800571a:	2b00      	cmp	r3, #0
 800571c:	d020      	beq.n	8005760 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005722:	4a12      	ldr	r2, [pc, #72]	; (800576c <HAL_SPI_IRQHandler+0x398>)
 8005724:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800572a:	4618      	mov	r0, r3
 800572c:	f7fc f950 	bl	80019d0 <HAL_DMA_Abort_IT>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d014      	beq.n	8005760 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800573c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005746:	e00b      	b.n	8005760 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f82b 	bl	80057ac <HAL_SPI_ErrorCallback>
    return;
 8005756:	e003      	b.n	8005760 <HAL_SPI_IRQHandler+0x38c>
    return;
 8005758:	bf00      	nop
 800575a:	e002      	b.n	8005762 <HAL_SPI_IRQHandler+0x38e>
    return;
 800575c:	bf00      	nop
 800575e:	e000      	b.n	8005762 <HAL_SPI_IRQHandler+0x38e>
    return;
 8005760:	bf00      	nop
  }
}
 8005762:	3728      	adds	r7, #40	; 0x28
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	fffffc94 	.word	0xfffffc94
 800576c:	080057d5 	.word	0x080057d5

08005770 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f7ff ffd6 	bl	80057ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0208 	orr.w	r2, r2, #8
 8005826:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0210 	orr.w	r2, r2, #16
 8005836:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0201 	bic.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6919      	ldr	r1, [r3, #16]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4b3c      	ldr	r3, [pc, #240]	; (8005944 <SPI_CloseTransfer+0x13c>)
 8005854:	400b      	ands	r3, r1
 8005856:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005866:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b04      	cmp	r3, #4
 8005872:	d014      	beq.n	800589e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00f      	beq.n	800589e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005884:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	699a      	ldr	r2, [r3, #24]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0220 	orr.w	r2, r2, #32
 800589c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d014      	beq.n	80058d4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00f      	beq.n	80058d4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ba:	f043 0204 	orr.w	r2, r3, #4
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00f      	beq.n	80058fe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e4:	f043 0201 	orr.w	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699a      	ldr	r2, [r3, #24]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058fc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00f      	beq.n	8005928 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800590e:	f043 0208 	orr.w	r2, r3, #8
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005926:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005938:	bf00      	nop
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	fffffc90 	.word	0xfffffc90

08005948 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	4613      	mov	r3, r2
 8005956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005958:	e010      	b.n	800597c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800595a:	f7fb fead 	bl	80016b8 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d803      	bhi.n	8005972 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005970:	d102      	bne.n	8005978 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e00f      	b.n	800599c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695a      	ldr	r2, [r3, #20]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4013      	ands	r3, r2
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	429a      	cmp	r2, r3
 800598a:	bf0c      	ite	eq
 800598c:	2301      	moveq	r3, #1
 800598e:	2300      	movne	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	429a      	cmp	r2, r3
 8005998:	d0df      	beq.n	800595a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b0:	095b      	lsrs	r3, r3, #5
 80059b2:	3301      	adds	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	3301      	adds	r3, #1
 80059bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	3307      	adds	r3, #7
 80059c2:	08db      	lsrs	r3, r3, #3
 80059c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	fb02 f303 	mul.w	r3, r2, r3
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e049      	b.n	8005a80 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d106      	bne.n	8005a06 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7fb fbbb 	bl	800117c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2202      	movs	r2, #2
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3304      	adds	r3, #4
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f000 fb6d 	bl	80060f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d001      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e05e      	b.n	8005b5e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a2b      	ldr	r2, [pc, #172]	; (8005b6c <HAL_TIM_Base_Start_IT+0xe4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d02c      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x94>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aca:	d027      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x94>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a27      	ldr	r2, [pc, #156]	; (8005b70 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d022      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x94>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a26      	ldr	r2, [pc, #152]	; (8005b74 <HAL_TIM_Base_Start_IT+0xec>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d01d      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x94>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a24      	ldr	r2, [pc, #144]	; (8005b78 <HAL_TIM_Base_Start_IT+0xf0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d018      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x94>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a23      	ldr	r2, [pc, #140]	; (8005b7c <HAL_TIM_Base_Start_IT+0xf4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d013      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x94>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a21      	ldr	r2, [pc, #132]	; (8005b80 <HAL_TIM_Base_Start_IT+0xf8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00e      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x94>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a20      	ldr	r2, [pc, #128]	; (8005b84 <HAL_TIM_Base_Start_IT+0xfc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d009      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x94>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a1e      	ldr	r2, [pc, #120]	; (8005b88 <HAL_TIM_Base_Start_IT+0x100>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d004      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x94>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a1d      	ldr	r2, [pc, #116]	; (8005b8c <HAL_TIM_Base_Start_IT+0x104>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d115      	bne.n	8005b48 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	4b1b      	ldr	r3, [pc, #108]	; (8005b90 <HAL_TIM_Base_Start_IT+0x108>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d015      	beq.n	8005b5a <HAL_TIM_Base_Start_IT+0xd2>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b34:	d011      	beq.n	8005b5a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 0201 	orr.w	r2, r2, #1
 8005b44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b46:	e008      	b.n	8005b5a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e000      	b.n	8005b5c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	40010000 	.word	0x40010000
 8005b70:	40000400 	.word	0x40000400
 8005b74:	40000800 	.word	0x40000800
 8005b78:	40000c00 	.word	0x40000c00
 8005b7c:	40010400 	.word	0x40010400
 8005b80:	40001800 	.word	0x40001800
 8005b84:	40014000 	.word	0x40014000
 8005b88:	4000e000 	.word	0x4000e000
 8005b8c:	4000e400 	.word	0x4000e400
 8005b90:	00010007 	.word	0x00010007

08005b94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e049      	b.n	8005c3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fb fb1e 	bl	80011fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	f000 fa90 	bl	80060f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b082      	sub	sp, #8
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d122      	bne.n	8005c9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d11b      	bne.n	8005c9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f06f 0202 	mvn.w	r2, #2
 8005c6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fa19 	bl	80060bc <HAL_TIM_IC_CaptureCallback>
 8005c8a:	e005      	b.n	8005c98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fa0b 	bl	80060a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fa1c 	bl	80060d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d122      	bne.n	8005cf2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d11b      	bne.n	8005cf2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f06f 0204 	mvn.w	r2, #4
 8005cc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f9ef 	bl	80060bc <HAL_TIM_IC_CaptureCallback>
 8005cde:	e005      	b.n	8005cec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f9e1 	bl	80060a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f9f2 	bl	80060d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f003 0308 	and.w	r3, r3, #8
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d122      	bne.n	8005d46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d11b      	bne.n	8005d46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f06f 0208 	mvn.w	r2, #8
 8005d16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f9c5 	bl	80060bc <HAL_TIM_IC_CaptureCallback>
 8005d32:	e005      	b.n	8005d40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f9b7 	bl	80060a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f9c8 	bl	80060d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f003 0310 	and.w	r3, r3, #16
 8005d50:	2b10      	cmp	r3, #16
 8005d52:	d122      	bne.n	8005d9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f003 0310 	and.w	r3, r3, #16
 8005d5e:	2b10      	cmp	r3, #16
 8005d60:	d11b      	bne.n	8005d9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f06f 0210 	mvn.w	r2, #16
 8005d6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2208      	movs	r2, #8
 8005d70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f99b 	bl	80060bc <HAL_TIM_IC_CaptureCallback>
 8005d86:	e005      	b.n	8005d94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f98d 	bl	80060a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f99e 	bl	80060d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d10e      	bne.n	8005dc6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d107      	bne.n	8005dc6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f06f 0201 	mvn.w	r2, #1
 8005dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7fa ffed 	bl	8000da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd0:	2b80      	cmp	r3, #128	; 0x80
 8005dd2:	d10e      	bne.n	8005df2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dde:	2b80      	cmp	r3, #128	; 0x80
 8005de0:	d107      	bne.n	8005df2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fe45 	bl	8006a7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e00:	d10e      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0c:	2b80      	cmp	r3, #128	; 0x80
 8005e0e:	d107      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fe38 	bl	8006a90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d10e      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e38:	2b40      	cmp	r3, #64	; 0x40
 8005e3a:	d107      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f94c 	bl	80060e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d10e      	bne.n	8005e78 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d107      	bne.n	8005e78 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0220 	mvn.w	r2, #32
 8005e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fdf8 	bl	8006a68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e78:	bf00      	nop
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e0ff      	b.n	800609e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b14      	cmp	r3, #20
 8005eaa:	f200 80f0 	bhi.w	800608e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005eae:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005f09 	.word	0x08005f09
 8005eb8:	0800608f 	.word	0x0800608f
 8005ebc:	0800608f 	.word	0x0800608f
 8005ec0:	0800608f 	.word	0x0800608f
 8005ec4:	08005f49 	.word	0x08005f49
 8005ec8:	0800608f 	.word	0x0800608f
 8005ecc:	0800608f 	.word	0x0800608f
 8005ed0:	0800608f 	.word	0x0800608f
 8005ed4:	08005f8b 	.word	0x08005f8b
 8005ed8:	0800608f 	.word	0x0800608f
 8005edc:	0800608f 	.word	0x0800608f
 8005ee0:	0800608f 	.word	0x0800608f
 8005ee4:	08005fcb 	.word	0x08005fcb
 8005ee8:	0800608f 	.word	0x0800608f
 8005eec:	0800608f 	.word	0x0800608f
 8005ef0:	0800608f 	.word	0x0800608f
 8005ef4:	0800600d 	.word	0x0800600d
 8005ef8:	0800608f 	.word	0x0800608f
 8005efc:	0800608f 	.word	0x0800608f
 8005f00:	0800608f 	.word	0x0800608f
 8005f04:	0800604d 	.word	0x0800604d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 f998 	bl	8006244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699a      	ldr	r2, [r3, #24]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0208 	orr.w	r2, r2, #8
 8005f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699a      	ldr	r2, [r3, #24]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0204 	bic.w	r2, r2, #4
 8005f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6999      	ldr	r1, [r3, #24]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	691a      	ldr	r2, [r3, #16]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	619a      	str	r2, [r3, #24]
      break;
 8005f46:	e0a5      	b.n	8006094 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68b9      	ldr	r1, [r7, #8]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fa08 	bl	8006364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	699a      	ldr	r2, [r3, #24]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6999      	ldr	r1, [r3, #24]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	021a      	lsls	r2, r3, #8
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	619a      	str	r2, [r3, #24]
      break;
 8005f88:	e084      	b.n	8006094 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68b9      	ldr	r1, [r7, #8]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 fa71 	bl	8006478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69da      	ldr	r2, [r3, #28]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0208 	orr.w	r2, r2, #8
 8005fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69da      	ldr	r2, [r3, #28]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0204 	bic.w	r2, r2, #4
 8005fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69d9      	ldr	r1, [r3, #28]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	61da      	str	r2, [r3, #28]
      break;
 8005fc8:	e064      	b.n	8006094 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68b9      	ldr	r1, [r7, #8]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fad9 	bl	8006588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69da      	ldr	r2, [r3, #28]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69da      	ldr	r2, [r3, #28]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69d9      	ldr	r1, [r3, #28]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	021a      	lsls	r2, r3, #8
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	61da      	str	r2, [r3, #28]
      break;
 800600a:	e043      	b.n	8006094 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fb22 	bl	800665c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0208 	orr.w	r2, r2, #8
 8006026:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0204 	bic.w	r2, r2, #4
 8006036:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	691a      	ldr	r2, [r3, #16]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800604a:	e023      	b.n	8006094 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68b9      	ldr	r1, [r7, #8]
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fb66 	bl	8006724 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006066:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006076:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	021a      	lsls	r2, r3, #8
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800608c:	e002      	b.n	8006094 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	75fb      	strb	r3, [r7, #23]
      break;
 8006092:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800609c:	7dfb      	ldrb	r3, [r7, #23]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop

080060a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a44      	ldr	r2, [pc, #272]	; (800621c <TIM_Base_SetConfig+0x124>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d013      	beq.n	8006138 <TIM_Base_SetConfig+0x40>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006116:	d00f      	beq.n	8006138 <TIM_Base_SetConfig+0x40>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a41      	ldr	r2, [pc, #260]	; (8006220 <TIM_Base_SetConfig+0x128>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00b      	beq.n	8006138 <TIM_Base_SetConfig+0x40>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a40      	ldr	r2, [pc, #256]	; (8006224 <TIM_Base_SetConfig+0x12c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d007      	beq.n	8006138 <TIM_Base_SetConfig+0x40>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a3f      	ldr	r2, [pc, #252]	; (8006228 <TIM_Base_SetConfig+0x130>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d003      	beq.n	8006138 <TIM_Base_SetConfig+0x40>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a3e      	ldr	r2, [pc, #248]	; (800622c <TIM_Base_SetConfig+0x134>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d108      	bne.n	800614a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a33      	ldr	r2, [pc, #204]	; (800621c <TIM_Base_SetConfig+0x124>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d027      	beq.n	80061a2 <TIM_Base_SetConfig+0xaa>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006158:	d023      	beq.n	80061a2 <TIM_Base_SetConfig+0xaa>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a30      	ldr	r2, [pc, #192]	; (8006220 <TIM_Base_SetConfig+0x128>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d01f      	beq.n	80061a2 <TIM_Base_SetConfig+0xaa>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a2f      	ldr	r2, [pc, #188]	; (8006224 <TIM_Base_SetConfig+0x12c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d01b      	beq.n	80061a2 <TIM_Base_SetConfig+0xaa>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a2e      	ldr	r2, [pc, #184]	; (8006228 <TIM_Base_SetConfig+0x130>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d017      	beq.n	80061a2 <TIM_Base_SetConfig+0xaa>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a2d      	ldr	r2, [pc, #180]	; (800622c <TIM_Base_SetConfig+0x134>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d013      	beq.n	80061a2 <TIM_Base_SetConfig+0xaa>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a2c      	ldr	r2, [pc, #176]	; (8006230 <TIM_Base_SetConfig+0x138>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00f      	beq.n	80061a2 <TIM_Base_SetConfig+0xaa>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a2b      	ldr	r2, [pc, #172]	; (8006234 <TIM_Base_SetConfig+0x13c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00b      	beq.n	80061a2 <TIM_Base_SetConfig+0xaa>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a2a      	ldr	r2, [pc, #168]	; (8006238 <TIM_Base_SetConfig+0x140>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d007      	beq.n	80061a2 <TIM_Base_SetConfig+0xaa>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a29      	ldr	r2, [pc, #164]	; (800623c <TIM_Base_SetConfig+0x144>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d003      	beq.n	80061a2 <TIM_Base_SetConfig+0xaa>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a28      	ldr	r2, [pc, #160]	; (8006240 <TIM_Base_SetConfig+0x148>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d108      	bne.n	80061b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a10      	ldr	r2, [pc, #64]	; (800621c <TIM_Base_SetConfig+0x124>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00f      	beq.n	8006200 <TIM_Base_SetConfig+0x108>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a12      	ldr	r2, [pc, #72]	; (800622c <TIM_Base_SetConfig+0x134>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00b      	beq.n	8006200 <TIM_Base_SetConfig+0x108>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a11      	ldr	r2, [pc, #68]	; (8006230 <TIM_Base_SetConfig+0x138>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d007      	beq.n	8006200 <TIM_Base_SetConfig+0x108>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a10      	ldr	r2, [pc, #64]	; (8006234 <TIM_Base_SetConfig+0x13c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d003      	beq.n	8006200 <TIM_Base_SetConfig+0x108>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a0f      	ldr	r2, [pc, #60]	; (8006238 <TIM_Base_SetConfig+0x140>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d103      	bne.n	8006208 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	615a      	str	r2, [r3, #20]
}
 800620e:	bf00      	nop
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	40010000 	.word	0x40010000
 8006220:	40000400 	.word	0x40000400
 8006224:	40000800 	.word	0x40000800
 8006228:	40000c00 	.word	0x40000c00
 800622c:	40010400 	.word	0x40010400
 8006230:	40014000 	.word	0x40014000
 8006234:	40014400 	.word	0x40014400
 8006238:	40014800 	.word	0x40014800
 800623c:	4000e000 	.word	0x4000e000
 8006240:	4000e400 	.word	0x4000e400

08006244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	f023 0201 	bic.w	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4b37      	ldr	r3, [pc, #220]	; (800634c <TIM_OC1_SetConfig+0x108>)
 8006270:	4013      	ands	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0303 	bic.w	r3, r3, #3
 800627a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f023 0302 	bic.w	r3, r3, #2
 800628c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a2d      	ldr	r2, [pc, #180]	; (8006350 <TIM_OC1_SetConfig+0x10c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00f      	beq.n	80062c0 <TIM_OC1_SetConfig+0x7c>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a2c      	ldr	r2, [pc, #176]	; (8006354 <TIM_OC1_SetConfig+0x110>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00b      	beq.n	80062c0 <TIM_OC1_SetConfig+0x7c>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a2b      	ldr	r2, [pc, #172]	; (8006358 <TIM_OC1_SetConfig+0x114>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d007      	beq.n	80062c0 <TIM_OC1_SetConfig+0x7c>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a2a      	ldr	r2, [pc, #168]	; (800635c <TIM_OC1_SetConfig+0x118>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d003      	beq.n	80062c0 <TIM_OC1_SetConfig+0x7c>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a29      	ldr	r2, [pc, #164]	; (8006360 <TIM_OC1_SetConfig+0x11c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d10c      	bne.n	80062da <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f023 0308 	bic.w	r3, r3, #8
 80062c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f023 0304 	bic.w	r3, r3, #4
 80062d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a1c      	ldr	r2, [pc, #112]	; (8006350 <TIM_OC1_SetConfig+0x10c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00f      	beq.n	8006302 <TIM_OC1_SetConfig+0xbe>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a1b      	ldr	r2, [pc, #108]	; (8006354 <TIM_OC1_SetConfig+0x110>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00b      	beq.n	8006302 <TIM_OC1_SetConfig+0xbe>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a1a      	ldr	r2, [pc, #104]	; (8006358 <TIM_OC1_SetConfig+0x114>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d007      	beq.n	8006302 <TIM_OC1_SetConfig+0xbe>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a19      	ldr	r2, [pc, #100]	; (800635c <TIM_OC1_SetConfig+0x118>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d003      	beq.n	8006302 <TIM_OC1_SetConfig+0xbe>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a18      	ldr	r2, [pc, #96]	; (8006360 <TIM_OC1_SetConfig+0x11c>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d111      	bne.n	8006326 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	4313      	orrs	r3, r2
 8006324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	621a      	str	r2, [r3, #32]
}
 8006340:	bf00      	nop
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	fffeff8f 	.word	0xfffeff8f
 8006350:	40010000 	.word	0x40010000
 8006354:	40010400 	.word	0x40010400
 8006358:	40014000 	.word	0x40014000
 800635c:	40014400 	.word	0x40014400
 8006360:	40014800 	.word	0x40014800

08006364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	f023 0210 	bic.w	r2, r3, #16
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4b34      	ldr	r3, [pc, #208]	; (8006460 <TIM_OC2_SetConfig+0xfc>)
 8006390:	4013      	ands	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800639a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	021b      	lsls	r3, r3, #8
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f023 0320 	bic.w	r3, r3, #32
 80063ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a29      	ldr	r2, [pc, #164]	; (8006464 <TIM_OC2_SetConfig+0x100>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d003      	beq.n	80063cc <TIM_OC2_SetConfig+0x68>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a28      	ldr	r2, [pc, #160]	; (8006468 <TIM_OC2_SetConfig+0x104>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d10d      	bne.n	80063e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	4313      	orrs	r3, r2
 80063de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a1e      	ldr	r2, [pc, #120]	; (8006464 <TIM_OC2_SetConfig+0x100>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00f      	beq.n	8006410 <TIM_OC2_SetConfig+0xac>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a1d      	ldr	r2, [pc, #116]	; (8006468 <TIM_OC2_SetConfig+0x104>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00b      	beq.n	8006410 <TIM_OC2_SetConfig+0xac>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a1c      	ldr	r2, [pc, #112]	; (800646c <TIM_OC2_SetConfig+0x108>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d007      	beq.n	8006410 <TIM_OC2_SetConfig+0xac>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a1b      	ldr	r2, [pc, #108]	; (8006470 <TIM_OC2_SetConfig+0x10c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_OC2_SetConfig+0xac>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a1a      	ldr	r2, [pc, #104]	; (8006474 <TIM_OC2_SetConfig+0x110>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d113      	bne.n	8006438 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006416:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800641e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	621a      	str	r2, [r3, #32]
}
 8006452:	bf00      	nop
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	feff8fff 	.word	0xfeff8fff
 8006464:	40010000 	.word	0x40010000
 8006468:	40010400 	.word	0x40010400
 800646c:	40014000 	.word	0x40014000
 8006470:	40014400 	.word	0x40014400
 8006474:	40014800 	.word	0x40014800

08006478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4b33      	ldr	r3, [pc, #204]	; (8006570 <TIM_OC3_SetConfig+0xf8>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0303 	bic.w	r3, r3, #3
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	021b      	lsls	r3, r3, #8
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a28      	ldr	r2, [pc, #160]	; (8006574 <TIM_OC3_SetConfig+0xfc>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d003      	beq.n	80064de <TIM_OC3_SetConfig+0x66>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a27      	ldr	r2, [pc, #156]	; (8006578 <TIM_OC3_SetConfig+0x100>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d10d      	bne.n	80064fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a1d      	ldr	r2, [pc, #116]	; (8006574 <TIM_OC3_SetConfig+0xfc>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00f      	beq.n	8006522 <TIM_OC3_SetConfig+0xaa>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a1c      	ldr	r2, [pc, #112]	; (8006578 <TIM_OC3_SetConfig+0x100>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00b      	beq.n	8006522 <TIM_OC3_SetConfig+0xaa>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a1b      	ldr	r2, [pc, #108]	; (800657c <TIM_OC3_SetConfig+0x104>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d007      	beq.n	8006522 <TIM_OC3_SetConfig+0xaa>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a1a      	ldr	r2, [pc, #104]	; (8006580 <TIM_OC3_SetConfig+0x108>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d003      	beq.n	8006522 <TIM_OC3_SetConfig+0xaa>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a19      	ldr	r2, [pc, #100]	; (8006584 <TIM_OC3_SetConfig+0x10c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d113      	bne.n	800654a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	011b      	lsls	r3, r3, #4
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	4313      	orrs	r3, r2
 800653c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	621a      	str	r2, [r3, #32]
}
 8006564:	bf00      	nop
 8006566:	371c      	adds	r7, #28
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	fffeff8f 	.word	0xfffeff8f
 8006574:	40010000 	.word	0x40010000
 8006578:	40010400 	.word	0x40010400
 800657c:	40014000 	.word	0x40014000
 8006580:	40014400 	.word	0x40014400
 8006584:	40014800 	.word	0x40014800

08006588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4b24      	ldr	r3, [pc, #144]	; (8006644 <TIM_OC4_SetConfig+0xbc>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	031b      	lsls	r3, r3, #12
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a19      	ldr	r2, [pc, #100]	; (8006648 <TIM_OC4_SetConfig+0xc0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00f      	beq.n	8006608 <TIM_OC4_SetConfig+0x80>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a18      	ldr	r2, [pc, #96]	; (800664c <TIM_OC4_SetConfig+0xc4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00b      	beq.n	8006608 <TIM_OC4_SetConfig+0x80>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a17      	ldr	r2, [pc, #92]	; (8006650 <TIM_OC4_SetConfig+0xc8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d007      	beq.n	8006608 <TIM_OC4_SetConfig+0x80>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a16      	ldr	r2, [pc, #88]	; (8006654 <TIM_OC4_SetConfig+0xcc>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d003      	beq.n	8006608 <TIM_OC4_SetConfig+0x80>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a15      	ldr	r2, [pc, #84]	; (8006658 <TIM_OC4_SetConfig+0xd0>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d109      	bne.n	800661c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800660e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	019b      	lsls	r3, r3, #6
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	621a      	str	r2, [r3, #32]
}
 8006636:	bf00      	nop
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	feff8fff 	.word	0xfeff8fff
 8006648:	40010000 	.word	0x40010000
 800664c:	40010400 	.word	0x40010400
 8006650:	40014000 	.word	0x40014000
 8006654:	40014400 	.word	0x40014400
 8006658:	40014800 	.word	0x40014800

0800665c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4b21      	ldr	r3, [pc, #132]	; (800670c <TIM_OC5_SetConfig+0xb0>)
 8006688:	4013      	ands	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800669c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	041b      	lsls	r3, r3, #16
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a18      	ldr	r2, [pc, #96]	; (8006710 <TIM_OC5_SetConfig+0xb4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00f      	beq.n	80066d2 <TIM_OC5_SetConfig+0x76>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a17      	ldr	r2, [pc, #92]	; (8006714 <TIM_OC5_SetConfig+0xb8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d00b      	beq.n	80066d2 <TIM_OC5_SetConfig+0x76>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a16      	ldr	r2, [pc, #88]	; (8006718 <TIM_OC5_SetConfig+0xbc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d007      	beq.n	80066d2 <TIM_OC5_SetConfig+0x76>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a15      	ldr	r2, [pc, #84]	; (800671c <TIM_OC5_SetConfig+0xc0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d003      	beq.n	80066d2 <TIM_OC5_SetConfig+0x76>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a14      	ldr	r2, [pc, #80]	; (8006720 <TIM_OC5_SetConfig+0xc4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d109      	bne.n	80066e6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	621a      	str	r2, [r3, #32]
}
 8006700:	bf00      	nop
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	fffeff8f 	.word	0xfffeff8f
 8006710:	40010000 	.word	0x40010000
 8006714:	40010400 	.word	0x40010400
 8006718:	40014000 	.word	0x40014000
 800671c:	40014400 	.word	0x40014400
 8006720:	40014800 	.word	0x40014800

08006724 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4b22      	ldr	r3, [pc, #136]	; (80067d8 <TIM_OC6_SetConfig+0xb4>)
 8006750:	4013      	ands	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4313      	orrs	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	051b      	lsls	r3, r3, #20
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	4313      	orrs	r3, r2
 8006772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a19      	ldr	r2, [pc, #100]	; (80067dc <TIM_OC6_SetConfig+0xb8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d00f      	beq.n	800679c <TIM_OC6_SetConfig+0x78>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a18      	ldr	r2, [pc, #96]	; (80067e0 <TIM_OC6_SetConfig+0xbc>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00b      	beq.n	800679c <TIM_OC6_SetConfig+0x78>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a17      	ldr	r2, [pc, #92]	; (80067e4 <TIM_OC6_SetConfig+0xc0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d007      	beq.n	800679c <TIM_OC6_SetConfig+0x78>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a16      	ldr	r2, [pc, #88]	; (80067e8 <TIM_OC6_SetConfig+0xc4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d003      	beq.n	800679c <TIM_OC6_SetConfig+0x78>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a15      	ldr	r2, [pc, #84]	; (80067ec <TIM_OC6_SetConfig+0xc8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d109      	bne.n	80067b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	029b      	lsls	r3, r3, #10
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	621a      	str	r2, [r3, #32]
}
 80067ca:	bf00      	nop
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	feff8fff 	.word	0xfeff8fff
 80067dc:	40010000 	.word	0x40010000
 80067e0:	40010400 	.word	0x40010400
 80067e4:	40014000 	.word	0x40014000
 80067e8:	40014400 	.word	0x40014400
 80067ec:	40014800 	.word	0x40014800

080067f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006804:	2302      	movs	r3, #2
 8006806:	e077      	b.n	80068f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a35      	ldr	r2, [pc, #212]	; (8006904 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d004      	beq.n	800683c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a34      	ldr	r2, [pc, #208]	; (8006908 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d108      	bne.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006842:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006854:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a25      	ldr	r2, [pc, #148]	; (8006904 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d02c      	beq.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800687a:	d027      	beq.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a22      	ldr	r2, [pc, #136]	; (800690c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d022      	beq.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a21      	ldr	r2, [pc, #132]	; (8006910 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d01d      	beq.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a1f      	ldr	r2, [pc, #124]	; (8006914 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d018      	beq.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a1a      	ldr	r2, [pc, #104]	; (8006908 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d013      	beq.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1b      	ldr	r2, [pc, #108]	; (8006918 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d00e      	beq.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1a      	ldr	r2, [pc, #104]	; (800691c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d009      	beq.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a18      	ldr	r2, [pc, #96]	; (8006920 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d004      	beq.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a17      	ldr	r2, [pc, #92]	; (8006924 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d10c      	bne.n	80068e6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	40010000 	.word	0x40010000
 8006908:	40010400 	.word	0x40010400
 800690c:	40000400 	.word	0x40000400
 8006910:	40000800 	.word	0x40000800
 8006914:	40000c00 	.word	0x40000c00
 8006918:	40001800 	.word	0x40001800
 800691c:	40014000 	.word	0x40014000
 8006920:	4000e000 	.word	0x4000e000
 8006924:	4000e400 	.word	0x4000e400

08006928 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006940:	2302      	movs	r3, #2
 8006942:	e087      	b.n	8006a54 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	4313      	orrs	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	041b      	lsls	r3, r3, #16
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a27      	ldr	r2, [pc, #156]	; (8006a60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d004      	beq.n	80069d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a25      	ldr	r2, [pc, #148]	; (8006a64 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d106      	bne.n	80069e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	4313      	orrs	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1e      	ldr	r2, [pc, #120]	; (8006a60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a1d      	ldr	r2, [pc, #116]	; (8006a64 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d126      	bne.n	8006a42 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	051b      	lsls	r3, r3, #20
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a0e      	ldr	r2, [pc, #56]	; (8006a60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d004      	beq.n	8006a34 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a0d      	ldr	r2, [pc, #52]	; (8006a64 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d106      	bne.n	8006a42 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	40010000 	.word	0x40010000
 8006a64:	40010400 	.word	0x40010400

08006a68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <memset>:
 8006aa4:	4402      	add	r2, r0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d100      	bne.n	8006aae <memset+0xa>
 8006aac:	4770      	bx	lr
 8006aae:	f803 1b01 	strb.w	r1, [r3], #1
 8006ab2:	e7f9      	b.n	8006aa8 <memset+0x4>

08006ab4 <__libc_init_array>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	4d0d      	ldr	r5, [pc, #52]	; (8006aec <__libc_init_array+0x38>)
 8006ab8:	4c0d      	ldr	r4, [pc, #52]	; (8006af0 <__libc_init_array+0x3c>)
 8006aba:	1b64      	subs	r4, r4, r5
 8006abc:	10a4      	asrs	r4, r4, #2
 8006abe:	2600      	movs	r6, #0
 8006ac0:	42a6      	cmp	r6, r4
 8006ac2:	d109      	bne.n	8006ad8 <__libc_init_array+0x24>
 8006ac4:	4d0b      	ldr	r5, [pc, #44]	; (8006af4 <__libc_init_array+0x40>)
 8006ac6:	4c0c      	ldr	r4, [pc, #48]	; (8006af8 <__libc_init_array+0x44>)
 8006ac8:	f000 f818 	bl	8006afc <_init>
 8006acc:	1b64      	subs	r4, r4, r5
 8006ace:	10a4      	asrs	r4, r4, #2
 8006ad0:	2600      	movs	r6, #0
 8006ad2:	42a6      	cmp	r6, r4
 8006ad4:	d105      	bne.n	8006ae2 <__libc_init_array+0x2e>
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}
 8006ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006adc:	4798      	blx	r3
 8006ade:	3601      	adds	r6, #1
 8006ae0:	e7ee      	b.n	8006ac0 <__libc_init_array+0xc>
 8006ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae6:	4798      	blx	r3
 8006ae8:	3601      	adds	r6, #1
 8006aea:	e7f2      	b.n	8006ad2 <__libc_init_array+0x1e>
 8006aec:	08006b60 	.word	0x08006b60
 8006af0:	08006b60 	.word	0x08006b60
 8006af4:	08006b60 	.word	0x08006b60
 8006af8:	08006b64 	.word	0x08006b64

08006afc <_init>:
 8006afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afe:	bf00      	nop
 8006b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b02:	bc08      	pop	{r3}
 8006b04:	469e      	mov	lr, r3
 8006b06:	4770      	bx	lr

08006b08 <_fini>:
 8006b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0a:	bf00      	nop
 8006b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0e:	bc08      	pop	{r3}
 8006b10:	469e      	mov	lr, r3
 8006b12:	4770      	bx	lr
